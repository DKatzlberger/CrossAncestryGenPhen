[{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/multiple_subsets_run.html","id":"data-setup","dir":"Articles","previous_headings":"","what":"Data setup","title":"Multiple subsets run","text":"example can see common scenario EUR ancestry larger sample size another (AFR).","code":"library(CrossAncestryGenPhen) library(ggplot2) #> Warning: package 'ggplot2' was built under R version 4.3.3  # Seed for reproducibility seed <- 42 set.seed(seed)  # Simulate example data p <- 100  # Number of genes n_EUR <- 600  n_AFR <- 40    # Expression matrices for EUR and AFR ancestries X <- matrix(rnorm(n_EUR * p), nrow = n_EUR, ncol = p) Y <- matrix(rnorm(n_AFR * p), nrow = n_AFR, ncol = p) colnames(X) <- colnames(Y) <- paste0(\"Gene_\", seq_len(p))  # Metadata for EUR and AFR ancestries # EUR: overrepresented compared to AFR MX <- data.frame(   condition = factor(c(rep(\"H\", 400), rep(\"D\", 200))),   ancestry = \"EUR\" )  # AFR: underrepresented compared to EUR MY <- data.frame(   condition = factor(c(rep(\"H\", 10), rep(\"D\", 30))),   ancestry = \"AFR\" )  # Visualize sample size imbalance meta <- rbind(MX, MY)  # Plot ggplot(meta, aes(x = ancestry, fill = condition)) +   geom_bar(position = \"dodge\", color = \"black\") +   labs(     title = \"Condition Imbalance Across Ancestries\",     x = \"Ancestry\",     y = \"Sample Count\",     fill = \"Condition\"   )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/multiple_subsets_run.html","id":"loop-run-with-multiple-subsets","dir":"Articles","previous_headings":"","what":"Loop run with multiple subsets","title":"Multiple subsets run","text":"next step create stratified subset account sample size also control condition imbalance underrepresented ancestry (AFR).","code":"# Set parameters g_col <- \"condition\"   a_col <- \"ancestry\"   stratify_cols <- c(\"condition\")  # Number of subsets and permutations n_iter <- 10 B <- 100  # Track results and sample ids perm_results <- list() id_log <- list()  # Loop through iterations for (i in seq_len(n_iter)) {      # Stratified ancestry sets   split <- split_stratified_ancestry_sets(       X = X,       Y = Y,       MX = MX,       MY = MY,       stratify_cols = stratify_cols,       seed = seed + i     )    # Store sample id usage with role (train, test, inference) and iteration   id_log[[i]] <- track_sample_ids(split, i)     # Run permutation difference interaction analysis   perm_res <- perm_interaction(       X = split$test$X,       Y = split$inference$X,       MX = split$test$M,       MY = split$inference$M,       g_col = g_col,       a_col = a_col,       B = B,       seed = seed + i     )      # Add up perm result   perm_stats <- perm_res$summary_stats   perm_stats$iteration <- i   perm_results[[length(perm_results) + 1]] <- perm_stats }  # Combine across iterations perm_combined <- do.call(rbind, perm_results) id_usage <- do.call(rbind, id_log)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/multiple_subsets_run.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"Multiple subsets run","text":"output contain combined permutation results across iterations. information can plot pvalue distribution. function plot_pvalue_distribution() plot distribution p-values across iterations.","code":"head(perm_combined, 10) #>    feature       T_obs        SE    CI_lower  CI_upper p_value     p_adj #> 1   Gene_1 -0.42964519 0.5219826 -1.49949237 0.4687023    0.45 0.8596491 #> 2   Gene_2  0.03005561 0.5150510 -0.95715769 0.9960202    0.99 0.9900000 #> 3   Gene_3 -0.34510354 0.3823954 -1.04333659 0.3216515    0.34 0.7906977 #> 4   Gene_4 -0.31790285 0.5697235 -1.27224010 0.6352423    0.59 0.9268293 #> 5   Gene_5 -0.21040408 0.6188076 -1.32794492 0.9799602    0.76 0.9268293 #> 6   Gene_6 -0.22639552 0.5089008 -1.13910032 0.6553430    0.67 0.9268293 #> 7   Gene_7  0.37994413 0.4952830 -0.68032629 1.2806535    0.48 0.8596491 #> 8   Gene_8  0.37742283 0.5792796 -0.78560858 1.4871481    0.46 0.8596491 #> 9   Gene_9  0.42564843 0.4999762 -0.49588042 1.2978366    0.43 0.8596491 #> 10 Gene_10  0.70502336 0.4105457 -0.08001494 1.5618394    0.08 0.7692308 #>    iteration #> 1          1 #> 2          1 #> 3          1 #> 4          1 #> 5          1 #> 6          1 #> 7          1 #> 8          1 #> 9          1 #> 10         1 plot_pvalue_distribution(   x = perm_combined,   features = NULL,   aggregation_fun = mean,   title = \"Histogram of p-values across iterations colored by mean T_obs\" )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/multiple_subsets_run.html","id":"dependence-of-output","dir":"Articles","previous_headings":"","what":"Dependence of output","title":"Multiple subsets run","text":"iteration uses samples underrepresented ancestry (AFR) EUR samples shared across iteration, dependence across iterations. sharing samples can visualized using plot_jaccard_heatmap() function.   dependence iterations also visible correaltion test statistics across iterations. can visualized using plot_correlation_heatmap() function.  demonstrations also correlation p-values can visualized.","code":"plot_jaccard_heatmap(   id_usage = id_usage,   role = \"test\",   title = \"Jaccard heatmap of sample usage across test sets\", ) plot_jaccard_heatmap(   id_usage = id_usage,   role = \"inference\",   title = \"Jaccard heatmap of sample usage across inference sets\", ) plot_correlation_heatmap(   x = perm_combined,   value_col = \"T_obs\",   title = \"Permutation T_obs correlation across subsets\", ) plot_correlation_heatmap(   x = perm_combined,   value_col = \"p_value\",   title = \"Permutation p-value correlation across subsets\", )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/multiple_subsets_run.html","id":"aggregation-of-iterations","dir":"Articles","previous_headings":"","what":"Aggregation of iterations","title":"Multiple subsets run","text":"apply permutation-based aggregation approach assess stability significance test statistics computed independently feature (e.g., gene) across resampling iterations. perm_aggregate_sets() function aggregates statistics per feature using user-defined function (mean) compares observed value null distribution generated permuting values within feature across iterations. method particularly sensitive features show consistently strong stable effects across resampling, effectively -weighting noisy unstable signals. accounts dependence structure induced repeated estimation provides empirical p-values without relying parametric assumptions. result, Type error conservatively controlled, reduced power (Type II error) may occur features weak highly variable signals.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/multiple_subsets_run.html","id":"test-statistics-aggregation","dir":"Articles","previous_headings":"Aggregation of iterations","what":"Test statistics aggregation","title":"Multiple subsets run","text":"function perm_aggregate_sets() able aggregate test_statistics p-values. use two-sided manner aggregate test statistics across iterations. output contains summary statisitcs $summary_stats null distribution $T_perm null distribution can plotted using plot_T_distribution() function.","code":"agg_res <- perm_aggregate_sets(   x = perm_combined,   T_col = \"T_obs\",   feature_col = \"feature\",   agg_fun = mean,   alternative = \"two.sided\",   B = 1000,   seed = seed ) head(agg_res$summary_stats, 10) #>     feature      T_obs     p_value       p_adj prop_sig alternative #> 1    Gene_1 -0.5127365 1.000000000 1.000000000        0   two.sided #> 2   Gene_10  0.4922079 0.000999001 0.002125534        0   two.sided #> 3  Gene_100  0.4742120 1.000000000 1.000000000        0   two.sided #> 4   Gene_11 -0.2272469 0.000999001 0.002125534        0   two.sided #> 5   Gene_12  0.3747943 0.000999001 0.002125534        0   two.sided #> 6   Gene_13 -0.5424559 1.000000000 1.000000000        0   two.sided #> 7   Gene_14 -0.1303577 1.000000000 1.000000000        0   two.sided #> 8   Gene_15  0.1816819 1.000000000 1.000000000        0   two.sided #> 9   Gene_16 -0.1701616 1.000000000 1.000000000        0   two.sided #> 10  Gene_17  0.2486676 1.000000000 1.000000000        0   two.sided plot_T_distribution(   x = agg_res,    statistic = \"T_perm\",   title = \"Permuted distribution with two-sided p-values\" )"},{"path":[]},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/permutation_correlation_difference.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Permutation Correlation Difference","text":"interaction effects useful test effect ancestry single genes, correlation difference allows look global trend across genes. subset approach used correct overrepresentation EUR ancestry. time remaining Europeans used reference test set test correlation. principle idea correlation (effect sizes relationship) must higher remaining Europeans EUR-subset remaining Eurpeans non-Europeans. Also case permutations used derive null distribution case correlation differences EUR-subset compared ancestry. gives estimate generalizability across genes.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/permutation_correlation_difference.html","id":"data-setup","dir":"Articles","previous_headings":"Introduction","what":"Data setup","title":"Permutation Correlation Difference","text":"","code":"library(CrossAncestryGenPhen) library(ggplot2)  # Seed for reproducibility seed <- 42   set.seed(seed)  # Simulate example data p <- 100  # Number of genes n_EUR <- 600  n_AFR <- 40    # Expression matrices for EUR and AFR ancestries X <- matrix(rnorm(n_EUR * p), nrow = n_EUR, ncol = p) Y <- matrix(rnorm(n_AFR * p), nrow = n_AFR, ncol = p) colnames(X) <- colnames(Y) <- paste0(\"Gene_\", seq_len(p))  # Metadata for EUR and AFR ancestries # EUR: overrepresented compared to AFR MX <- data.frame(   id = paste0(\"EUR_\", seq_len(n_EUR)),   condition = factor(c(rep(\"Control\", 400), rep(\"Case\", 200))),   ancestry = \"EUR\" )  # AFR: underrepresented compared to EUR MY <- data.frame(   id = paste0(\"AFR_\", seq_len(n_AFR)),   condition = factor(c(rep(\"Control\", 10), rep(\"Case\", 30))),   ancestry = \"AFR\" )  # Rownames of matrix must be smaple ids rownames(X) <- MX$id rownames(Y) <- MY$id  # Visualize sample size imbalance meta <- rbind(MX, MY)  # Plot ggplot(meta, aes(x = ancestry, fill = condition)) +   geom_bar(position = \"dodge\", color = \"black\") +   labs(     title = \"Condition Imbalance Across Ancestries\",     x = \"Ancestry\",     y = \"Sample Count\",     fill = \"Condition\"   )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/permutation_correlation_difference.html","id":"single-subset-run-of-permutation-correlation-effect","dir":"Articles","previous_headings":"","what":"Single subset run of permutation correlation effect","title":"Permutation Correlation Difference","text":"function perm_correlation_difference() calculates correlation reference set  output function contains three items: summary_stats: Contains estimated difference correlation (T_obs) p_values per features. also contains correlation values reference XR XY, respectively. T_null: observed null distribution feature across permutations. B_used: number permutation iterations used estimate null distribution.","code":"stratify_col <- \"condition\" # Column to stratify on  # Split the data into stratified sets split <- split_stratified_ancestry_sets(   X = X,   Y = Y,   MX = MX,   MY = MY,   g_col = stratify_col,   seed = 42 )  # Visulaize stratified sets plot_stratified_sets(   MX = split$test$M,   MY = split$inference$M,   MR = split$train$M,   g_col = stratify_col ) # Permutation correlation difference  B <- 100  # Number of permutations method = \"pearson\" # Correlation coefficient  perm_res <- perm_correlation_difference(   X = split$test$X,   Y = split$inference$X,   R = split$train$X,   MX = split$test$M,   MY = split$inference$M,   MR = split$train$M,   g_col = stratify_col,   method = method,   B = B,    seed = seed )  str(perm_res) #> List of 3 #>  $ summary_stats:'data.frame':   1 obs. of  6 variables: #>   ..$ feature      : chr \"Global\" #>   ..$ T_obs        : num 0.0748 #>   ..$ XR           : num -0.0108 #>   ..$ YR           : num 0.064 #>   ..$ p_param_value: num 0.591 #>   ..$ p_emp_value  : num 0.644 #>  $ T_null       : num [1:100, 1] -0.0121 0.1882 0.0257 0.1055 -0.0015 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr \"T_null\" #>  $ B_used       : int 100"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/permutation_interaction_effect.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Subset interaction effect","text":"showcase permutation testing used assess genotype-phenotype relationships differ across ancestries. omics research frameworks like limma gold standard test differetnial expressed genes. However, frameworks build biological statistical assuptions underlying data. permutation testing theses assumptions reduced, pvalues derived modelling empirical null distribution. case interaction effects form phenotype x ancestry, ancestry label permuted creating null, assumes effect ancestry.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/permutation_interaction_effect.html","id":"overrepresentation-of-eur-ancestry","dir":"Articles","previous_headings":"Introduction","what":"Overrepresentation of EUR ancestry","title":"Subset interaction effect","text":"omics research EUR ancestry often overrepresented compared ancestries. Hence, data non-Europeans often sparse can effect discovery true effects. frameworkCrossAncestryGenPhen tries fair subsampling overrepresented ancestry match sample size underrepresented ancestry. following code snippet showcases imbalance simulated dataset.","code":"library(CrossAncestryGenPhen) library(ggplot2)  # Seed for reproducibility set.seed(42)  # Example data  n_features <- 100   n_EUR <- 600  n_AFR <- 40    id_EUR <- paste0(\"Sample_\", seq_len(n_EUR)) id_AFR <- paste0(\"Sample_\", seq_len(n_AFR))   # Expression matrices for EUR and AFR ancestries X <- matrix(rnorm(n_EUR * n_features), nrow = n_EUR, ncol = n_features) Y <- matrix(rnorm(n_AFR * n_features), nrow = n_AFR, ncol = n_features) colnames(X) <- colnames(Y) <- paste0(\"Feature_\", seq_len(n_features))  # Metadata for EUR and AFR ancestries # EUR: overrepresented compared to AFR MX <- data.frame(   condition = factor(c(rep(\"Control\", 400), rep(\"Case\", 200))),   ancestry = \"EUR\" )  # AFR: underrepresented compared to EUR MY <- data.frame(   condition = factor(c(rep(\"Control\", 10), rep(\"Case\", 30))),   ancestry = \"AFR\" )  # Rownames of matrix must be smaple ids rownames(X) <- rownames(MX) <- id_EUR rownames(Y) <- rownames(MY) <- id_AFR  # Plot plot_imbalanced_groups(   MX = MX,   MY = MY,   x_var = \"ancestry\",   fill_var = \"condition\",   title = \"Imbalanced ancestry groups\",   x_label = \"Ancestry group\",   y_label = \"No. of patients\" )"},{"path":[]},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/permutation_interaction_effect.html","id":"stratification-step","dir":"Articles","previous_headings":"Single subset run","what":"Stratification step","title":"Subset interaction effect","text":"function split_stratified_ancestry_sets creates stratified subset account sample size also control phenotype imbalance underrepresented ancestry. idea create EUR train set, remaining EUR cohort subsampling, EUR-subset test set (mimicking underrepresented ancestry) based compared ancestry inferecnce set. output contain train, test inference sets additional information used strata. subset contains gene expression matrix ($X), metadata frame ($M) used ids ($ids).","code":"g_col <- \"condition\" # Column with group information (stratified for) a_col <- \"ancestry\"  # Column with ancestry information  # Split the data into stratified sets split <- split_stratified_ancestry_sets(   X = X,   Y = Y,   MX = MX,   MY = MY,   g_col = g_col,   a_col = a_col,   seed = 42 )  # Visulaize stratified sets plot_stratified_sets(   MX = split$test$M,   MY = split$inference$M,   MR = split$train$M,   x_var = \"ancestry\",   fill_var = \"condition\",   title = \"Stratified ancestry sets\",   x_label = \"Ancestry group\",   y_label = \"No. of patients\" )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/single_subset_run.html","id":"data-setup","dir":"Articles","previous_headings":"","what":"Data setup","title":"Single subset run","text":"example can see common scenario EUR ancestry larger sample size another (AFR).","code":"library(CrossAncestryGenPhen) library(ggplot2) #> Warning: package 'ggplot2' was built under R version 4.3.3  # Seed for reproducibility set.seed(42)  # Simulate example data p <- 100  # Number of genes n_EUR <- 600  n_AFR <- 40    # Expression matrices for EUR and AFR ancestries X <- matrix(rnorm(n_EUR * p), nrow = n_EUR, ncol = p) Y <- matrix(rnorm(n_AFR * p), nrow = n_AFR, ncol = p) colnames(X) <- colnames(Y) <- paste0(\"Gene_\", seq_len(p))  # Metadata for EUR and AFR ancestries # EUR: overrepresented compared to AFR MX <- data.frame(   condition = factor(c(rep(\"H\", 400), rep(\"D\", 200))),   ancestry = \"EUR\" )  # AFR: underrepresented compared to EUR MY <- data.frame(   condition = factor(c(rep(\"H\", 10), rep(\"D\", 30))),   ancestry = \"AFR\" )  # Visualize sample size imbalance meta <- rbind(MX, MY)  # Plot ggplot(meta, aes(x = ancestry, fill = condition)) +   geom_bar(position = \"dodge\", color = \"black\") +   labs(     title = \"Condition Imbalance Across Ancestries\",     x = \"Ancestry\",     y = \"Sample Count\",     fill = \"Condition\"   )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/single_subset_run.html","id":"stratification-step","dir":"Articles","previous_headings":"","what":"Stratification step","title":"Single subset run","text":"next step create stratified subset account sample size also control condition imbalance underrepresented ancestry (AFR).  output contain train, test inference sets additional information used strata. subset (train, test, inference) contains gene expression matrix ($X) metadata frame ($M).","code":"# Define column to stratify stratify_cols <- c(\"condition\")  # Split the data into stratified sets split <- split_stratified_ancestry_sets(   X = X,   Y = Y,   MX = MX,   MY = MY,   stratify_cols = stratify_cols,   seed = 42 )  # Visulaize stratified sets plot_stratified_sets(   x = split,   stratify_cols = stratify_cols ) # Output str(split) #> List of 4 #>  $ train      :List of 3 #>   ..$ X  : num [1:560, 1:100] 1.371 -0.565 0.363 0.633 0.404 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:100] \"Gene_1\" \"Gene_2\" \"Gene_3\" \"Gene_4\" ... #>   ..$ M  :'data.frame':  560 obs. of  2 variables: #>   .. ..$ condition: Factor w/ 2 levels \"D\",\"H\": 2 2 2 2 2 2 2 2 2 2 ... #>   .. ..$ ancestry : chr [1:560] \"EUR\" \"EUR\" \"EUR\" \"EUR\" ... #>   ..$ ids: chr [1:560] \"1\" \"2\" \"3\" \"4\" ... #>  $ test       :List of 3 #>   ..$ X  : num [1:40, 1:100] 1.215 -1.097 1.113 -0.8 0.446 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:100] \"Gene_1\" \"Gene_2\" \"Gene_3\" \"Gene_4\" ... #>   ..$ M  :'data.frame':  40 obs. of  2 variables: #>   .. ..$ condition: Factor w/ 2 levels \"D\",\"H\": 2 2 2 2 2 2 2 2 2 2 ... #>   .. ..$ ancestry : chr [1:40] \"EUR\" \"EUR\" \"EUR\" \"EUR\" ... #>   ..$ ids: chr [1:40] \"24\" \"136\" \"146\" \"158\" ... #>  $ inference  :List of 3 #>   ..$ X  : num [1:40, 1:100] 0.389 0.442 -0.533 -0.781 -0.124 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:100] \"Gene_1\" \"Gene_2\" \"Gene_3\" \"Gene_4\" ... #>   ..$ M  :'data.frame':  40 obs. of  2 variables: #>   .. ..$ condition: Factor w/ 2 levels \"D\",\"H\": 2 2 2 2 2 2 2 2 2 2 ... #>   .. ..$ ancestry : chr [1:40] \"AFR\" \"AFR\" \"AFR\" \"AFR\" ... #>   ..$ ids: chr [1:40] \"1\" \"2\" \"3\" \"4\" ... #>  $ strata_info:List of 3 #>   ..$ usable      : chr [1:2] \"D\" \"H\" #>   ..$ missing     : chr(0)  #>   ..$ insufficient: chr(0)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/single_subset_run.html","id":"permutation-interaction-analysis","dir":"Articles","previous_headings":"","what":"Permutation interaction analysis","title":"Single subset run","text":"Next, use test inference sets evaluate interaction effects condition ancestry using permutation-based inference. perm_diff_interaction() function estimates differential interactions groups using bootstrapping permtuation.","code":"# Define the ancestry column and the condition column g_col <- \"condition\" a_col <- \"ancestry\"  # Define the number of permutations B <- 100  result <- perm_interaction(   X = split$test$X,   Y = split$inference$X,   MX = split$test$M,   MY = split$inference$M,   g_col = g_col,   a_col = a_col,   permute = TRUE,   # Perform permutation   B = B,            # Number of iterations (shared for both bootstrapping and permutation)   seed = 42,   check_convergence = TRUE )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/single_subset_run.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"Single subset run","text":"summary_stats interaction results, including p-values adjusted p-values gene listed. function uses bootstrapping estimate confidence intervals SE interaction permutation calculate p-values. uses B bootstrapping permutation, set 1000 example. information statistics can found result object. actual number B used can found result$B_used_boot result$B_used_perm, respectively. actual values test statistics can found result$T_boot result$T_perm, respectively. distribution test statistics can visualized using plot_T_distribution function. plot shows distribution bootstrapped test statistics selected genes, dashed lines observed values dotted lines 95% confidence intervals.  set permute = TRUE, distribution permuted test statistics can visualized using plot_T_distribution function. plot displays empirical null distribution permutations. dashed line indicates observed statistic. Facet titles include empirical two-sided p-values.","code":"head(result$summary_stats, 10) #>    feature      T_obs        SE     CI_lower  CI_upper p_value     p_adj #> 1   Gene_1 -0.5130443 0.4412874 -1.306247638 0.3360436    0.19 0.7800000 #> 2   Gene_2 -0.6683108 0.4617191 -1.484769846 0.1642994    0.22 0.7800000 #> 3   Gene_3 -0.3320232 0.3667014 -1.047249295 0.2551065    0.49 0.8596491 #> 4   Gene_4  0.5558679 0.4479466 -0.603561978 1.4086939    0.25 0.7800000 #> 5   Gene_5 -0.5341650 0.4910636 -1.393174739 0.4602953    0.36 0.7800000 #> 6   Gene_6 -0.5112056 0.5062823 -1.432973090 0.4145875    0.33 0.7800000 #> 7   Gene_7  0.8474367 0.4875300 -0.005442512 1.7500408    0.06 0.6000000 #> 8   Gene_8  0.4034361 0.4075680 -0.400479714 1.2834502    0.35 0.7800000 #> 9   Gene_9 -0.7058754 0.4609808 -1.646972632 0.1074301    0.25 0.7800000 #> 10 Gene_10  0.6851216 0.4751798 -0.081094376 1.6274366    0.20 0.7800000 result$B_used_boot #> [1] 100 result$B_used_perm #> [1] 100 plot_T_distribution(   x = result,    statistic = \"T_boot\",   title = \"Bootstrapped distribution with 95% confidence intervals\" ) plot_T_distribution(   x = result,    statistic = \"T_perm\",   title = \"Permuted distribution with two-sided p-values\" )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/subset_interaction_effect.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Subset interaction effect","text":"omics research frameworks like limma gold standard test differetnial expressed genes. However inbalances input data might increase FPR linear models. subset approach mitigate problem.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/subset_interaction_effect.html","id":"overrepresentation-of-eur-ancestry","dir":"Articles","previous_headings":"Introduction","what":"Overrepresentation of EUR ancestry","title":"Subset interaction effect","text":"omics research EUR ancestry often overrepresented compared ancestries. Hence, data non-Europeans often sparse can effect discovery true effects. frameworkCrossAncestryGenPhen tries fair subsampling overrepresented ancestry match sample size underrepresented ancestry. following code snippet showcases imbalance simulated dataset.","code":"library(CrossAncestryGenPhen)  # Seed for reproducibility set.seed(42)  # Example data  n_features <- 100   n_EUR <- 600  n_AFR <- 40    id_EUR <- paste0(\"EUR_\", seq_len(n_EUR)) id_AFR <- paste0(\"AFR_\", seq_len(n_AFR))  lambda_features <- sample(   c(     rpois(20, 3),    # ~20 low-count features     rpois(60, 20),   # ~60 medium-count features     rpois(20, 120)   # ~20 high-count features   ),   size = n_features,   replace = FALSE )  # Expression matrices for EUR and AFR ancestries X <- sapply(lambda_features, function(lam) rpois(n_EUR, lambda = lam)) Y <- sapply(lambda_features, function(lam) rpois(n_AFR, lambda = lam)) colnames(X) <- colnames(Y) <- paste0(\"Feature_\", seq_len(n_features))   # Metadata for EUR and AFR ancestries # EUR: overrepresented compared to AFR MX <- data.frame(   condition = factor(c(rep(\"Control\", 400), rep(\"Case\", 200)), levels = c(\"Control\", \"Case\")),   ancestry = \"EUR\",   sex      = sample(c(\"Male\", \"Female\"), n_EUR, replace = TRUE),   age      = round(rnorm(n_EUR, mean = 50, sd = 12)) )  # AFR: underrepresented compared to EUR MY <- data.frame(   condition = factor(c(rep(\"Control\", 10), rep(\"Case\", 30)), levels = c(\"Control\", \"Case\")),   ancestry = \"AFR\",   sex      = sample(c(\"Male\", \"Female\"), n_AFR, replace = TRUE),   age      = round(rnorm(n_AFR, mean = 48, sd = 11)) )  # Rownames of matrix must be smaple ids rownames(X) <- rownames(MX) <- id_EUR rownames(Y) <- rownames(MY) <- id_AFR   # Spike in effect in AFR Case (strong effect, but only for half of AFR cases) # AFR Case: strong effect, half of cases afr_case_idx <- which(MY$condition == \"Case\") afr_spike_idx <- sample(afr_case_idx, length(afr_case_idx) / 2) Y[afr_spike_idx, 1:4] <- Y[afr_spike_idx, 1:4] +   rpois(length(afr_spike_idx) * 4, lambda = 80)  # EUR Case: weaker effect, 20% of cases eur_case_idx <- which(MX$condition == \"Case\") eur_spike_idx <- sample(eur_case_idx, length(eur_case_idx) * 0.2) X[eur_spike_idx, 1:4] <- X[eur_spike_idx, 1:4] +   rpois(length(eur_spike_idx) * 4, lambda = 20)  # Plot imbalance plot_imbalanced_groups(   MX = MX,   MY = MY,   x_var = \"ancestry\",   fill_var = \"condition\",   title = \"Imbalanced ancestry groups\",   x_label = \"Ancestry\",   y_label = \"No. of patients\" )  # Plot features plot_feature(   X = X,    Y = Y,    MX = MX,    MY = MY,    x_var = \"ancestry\",   fill_var = \"condition\",   title = \"Feature counts\",   x_label = \"Ancestry\",   y_label = \"Z-score\" )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/subset_interaction_effect.html","id":"contrasts-in-limma_interaction_effect","dir":"Articles","previous_headings":"Introduction","what":"Contrasts in limma_interaction_effect","title":"Subset interaction effect","text":"function limma_interaction_effect() fits 2 × 2 design (two groups × two ancestries) evaluates four main contrasts plus interaction. summary contrast represents: G1 / G2 = two levels g_col variable (e.g. Control / Case). A1 / A2 = two ancestries provided (MX == A1 == A2). output can easily filtered coefficient interest plotted function plot_volcano().  Assuming found significant","code":"res <- limma_interaction_effect(   X = X,   Y = Y,   MX = MX,   MY = MY,   g_col = \"condition\",   a_col = \"ancestry\",   covariates = c(\"sex\", \"age\"),   use_voom = TRUE,   verbose = TRUE ) #>  #> Linear model summary: #> Formula:        ~0 + groups + sex + age #> Groups:         Control.EUR  Case.EUR  Control.AFR  Case.AFR #> Baseline:       Control.AFR - Control.EUR  Case.AFR - Case.EUR #> Relationship:   Case.EUR - Control.EUR  Case.AFR - Control.AFR #> Interaction:    (Case.AFR - Control.AFR) - (Case.EUR - Control.EUR)  print(head(res)) #>    coef_type                  contrast   feature       T_obs   p_value #> 1 baseline_1 Control.AFR - Control.EUR Feature_1 -0.10683710 0.5296430 #> 2 baseline_1 Control.AFR - Control.EUR Feature_2  0.18229653 0.6783480 #> 3 baseline_1 Control.AFR - Control.EUR Feature_3 -0.66960349 0.2858098 #> 4 baseline_1 Control.AFR - Control.EUR Feature_4 -0.03846892 0.8395951 #> 5 baseline_1 Control.AFR - Control.EUR Feature_5  0.15718092 0.1140348 #> 6 baseline_1 Control.AFR - Control.EUR Feature_6 -0.10661937 0.7439013 #>       p_adj  ave_expr #> 1 0.8682672 12.618695 #> 2 0.9311933 10.371654 #> 3 0.8682672  9.929222 #> 4 0.9433653 12.358806 #> 5 0.8682672 12.407350 #> 6 0.9311933  9.058603 # Filter for interaction effect interaction_res <- subset(res, coef_type == \"interaction\")  plot_volcano(   data = interaction_res,    x_var = \"T_obs\",    y_var = \"p_adj\",    sig_thr = 0.05,    effect_thr = 1,   features = head(interaction_res$feature, 9),   title = \"Volcano plot of the interaction effect\",    x_label = \"Interaction effect (log2FC)\",   y_label = \"FDR corrected p-value (-log10)\" )  plot_pvalue_distribution(   data = interaction_res,   x_var = \"p_value\",   fill_var = \"ave_expr\",   facet_col = NULL,   facet_levels = NULL,   title = \"P-value distribution of interaction effects\",   x_label = \"P-value\",   y_label = \"Count\",   fill_label = \"Aver. Expr.\\n(logCPM)\" )"},{"path":[]},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/subset_interaction_effect.html","id":"stratification-step","dir":"Articles","previous_headings":"Single subset run","what":"Stratification step","title":"Subset interaction effect","text":"function split_stratified_ancestry_sets creates stratified subset account sample size also control phenotype imbalance underrepresented ancestry. idea create EUR Train-set, remaining EUR cohort subsampling, EUR-subset Test-set (mimicking underrepresented ancestry) based compared ancestry Inferecnce-set. function plot_stratified_sets plots stratified ancestry sets. function plot_stratified_feature allows plot single multiple features per split.","code":"# Split the data into stratified sets split <- split_stratified_ancestry_sets(   X = X,   Y = Y,   MX = MX,   MY = MY,   g_col = \"condition\",   a_col = \"ancestry\",   seed = 42,   verbose = TRUE ) #>  #> Stratified split summary: #> EUR (Reference, R):    N: 560  Control: 390  Case: 170 #> EUR (Subset, X):       N: 40   Control: 10   Case: 30 #> AFR (Inference, Y):    N: 40   Control: 10   Case: 30  # Visulaize stratified sets plot_stratified_sets(   MX = split$X$meta,   MY = split$Y$meta,   MR = split$R$meta,   x_var = \"ancestry\",   fill_var = \"condition\",   title = \"Stratified ancestry sets\",   x_label = \"Ancestry\",   y_label = \"No. of patients\" )  # Visulaize stratified features plot_stratified_feature(   X = split$X$counts,   Y = split$Y$counts,   R = split$R$counts,   MX = split$X$meta,   MY = split$Y$meta,   MR = split$R$meta,   x_var = \"ancestry\",   fill_var = \"condition\",   title = \"Feature counts in stratified ancestry sets\",   x_label = \"Ancestry\",   y_label = \"Z-score\" )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/subset_interaction_effect.html","id":"limma-interaction-effect-on-single-subset","dir":"Articles","previous_headings":"Single subset run","what":"Limma interaction effect on single subset","title":"Subset interaction effect","text":"function split_stratified_ancestry_sets creates subset overrepresented ancestry. Note: single subset generates one estimate difference recomendet run multiple subsets get robust estimate interaction effect.","code":"res <- limma_interaction_effect(   X = split$X$counts,   Y = split$Y$counts,   MX = split$X$meta,   MY = split$Y$meta,   g_col = \"condition\",   a_col = \"ancestry\",   covariates = c(\"sex\", \"age\"),   use_voom = TRUE,   verbose = TRUE ) #>  #> Linear model summary: #> Formula:        ~0 + groups + sex + age #> Groups:         Control.EUR  Case.EUR  Control.AFR  Case.AFR #> Baseline:       Control.AFR - Control.EUR  Case.AFR - Case.EUR #> Relationship:   Case.EUR - Control.EUR  Case.AFR - Control.AFR #> Interaction:    (Case.AFR - Control.AFR) - (Case.EUR - Control.EUR)  res <- subset(res, coef_type == \"interaction\")  print(head(res)) #>       coef_type                                            contrast   feature #> 401 interaction (Case.AFR - Control.AFR) - (Case.EUR - Control.EUR) Feature_1 #> 402 interaction (Case.AFR - Control.AFR) - (Case.EUR - Control.EUR) Feature_2 #> 403 interaction (Case.AFR - Control.AFR) - (Case.EUR - Control.EUR) Feature_3 #> 404 interaction (Case.AFR - Control.AFR) - (Case.EUR - Control.EUR) Feature_4 #> 405 interaction (Case.AFR - Control.AFR) - (Case.EUR - Control.EUR) Feature_5 #> 406 interaction (Case.AFR - Control.AFR) - (Case.EUR - Control.EUR) Feature_6 #>          T_obs    p_value     p_adj  ave_expr #> 401  1.2186459 0.01163693 0.5036107 12.970857 #> 402  1.9562581 0.09064993 0.5036107 11.104253 #> 403  3.0480689 0.03312673 0.5036107 10.577955 #> 404  1.0454901 0.07158428 0.5036107 12.696330 #> 405 -0.1412233 0.35553674 0.8228834 12.451729 #> 406 -0.2792438 0.57859836 0.8358211  9.023236"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/subset_interaction_effect.html","id":"multiple-subset-runs","dir":"Articles","previous_headings":"","what":"Multiple subset runs","title":"Subset interaction effect","text":"mentioned, single subset generates one estimate difference. get robust estimate interaction effect, recommended run multiple subsets. case pipeline similar run single subset concerns aggregate multiple subsets. samples underrepresented ancestry identical multiple subsets introduced dependence. Hence, aggregating p-values test statistics trivial. loop calculated interaction effect many subsets. Hence, p-value feature subset. can plot distribution p-values function plot_pvalue_distribution().","code":"# We track the SampleIDs and the summary statisitcs over many subsets res_log <- list() id_log  <- list()  for (i in 1:10) {      # Stratified ancestry sets   split <- split_stratified_ancestry_sets(     X = X,     Y = Y,     MX = MX,     MY = MY,     g_col = \"condition\",     a_col = \"ancestry\",     seed = 42 + i,     verbose = FALSE   )    # Store sample ids   id_log[[i]] <- track_sample_ids(split, i)    # Limma interaction effects   res <- limma_interaction_effect(     X = split$X$counts,     Y = split$Y$counts,     MX = split$X$meta,     MY = split$Y$meta,     g_col = \"condition\",     a_col = \"ancestry\",     covariates = c(\"sex\", \"age\"),     use_voom = TRUE,     verbose = FALSE   )    res <- subset(res, coef_type == \"interaction\")     # Store subset runs   res$iteration <- i   res_log[[length(res_log) + 1]] <- res }  # Combine across iterations combined_res <- do.call(rbind, res_log) combined_id  <- do.call(rbind, id_log) # Visualize p-value distribution plot_pvalue_distribution(   data = combined_res,   x_var = \"p_value\",   fill_var = \"T_obs\",   facet_col = \"feature\",   title = \"Histogram of p-values across multiple subsets\",   x_label = \"P-value\",   y_label = \"Count\",   fill_label = \"Log2FC\",   bins = 50,   fill_bins = 9 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/subset_interaction_effect.html","id":"dependence-of-multiple-subsets","dir":"Articles","previous_headings":"Multiple subset runs","what":"Dependence of multiple subsets","title":"Subset interaction effect","text":"biological view, feautures low p-value across subsets likely true positives. However, statistical perspective, p-values independent across subsets hence aggregate important consider. samples shared across subsets sharing samples can visualized using plot_jaccard_heatmap() function.  Correlation test statistic p-values can visualized using plot_correlation_heatmap() function.","code":"plot_jaccard_heatmap(   data = combined_id,   role = \"X\",   title = \"Jaccard heatmap of used sampleIDs in subsets\", )  plot_jaccard_heatmap(   data = combined_id,   role = \"Y\",   title = \"Jaccard heatmap of used sampleIDs in inference\", ) plot_correlation_heatmap(   data = combined_res,   value_col = \"T_obs\",   iter_col = \"iteration\",   title = \"Test statistic correlation across subsets\", )  plot_correlation_heatmap(   data = combined_res,   value_col = \"p_value\",   iter_col = \"iteration\",   title = \"P-value correlation across subsets\", )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/articles/subset_interaction_effect.html","id":"aggregation-of-multiple-subsets","dir":"Articles","previous_headings":"Multiple subset runs","what":"Aggregation of multiple subsets","title":"Subset interaction effect","text":"aggregate p-values subset decided two methods one simply taking mean p-values. Another approach use cauchy-combination test possible abbretrary dependance. function call multiple subsets summarize_subsets().","code":"# Aggregation of p-values aggregated_res <- summarize_subsets(   data = combined_res )  print(head(aggregated_res)) #>     feature      T_obs    p_value    p_adj  cct_value   cct_adj prob_sig #> 1 Feature_1  0.9433479 0.06121674 0.738991 0.04089120 0.6457288        0 #> 2 Feature_2  1.3356309 0.28316862 0.738991 0.21907536 0.9950796        0 #> 3 Feature_3  2.3774571 0.10392259 0.738991 0.05783392 0.6457288        0 #> 4 Feature_4  0.9913829 0.08259291 0.738991 0.05924215 0.6457288        0 #> 5 Feature_5 -0.1450369 0.40067978 0.738991 0.25437098 0.9950796        0 #> 6 Feature_6  0.1433863 0.63721534 0.738991 0.86123688 0.9950796        0 #>    ave_expr #> 1 12.983109 #> 2 11.135611 #> 3 10.681342 #> 4 12.756946 #> 5 12.409589 #> 6  9.063243  plot_volcano(   data = aggregated_res,    x_var = \"T_obs\",    y_var = \"p_adj\",    sig_thr = 0.05,    effect_thr = 1,   features = head(interaction_res$feature, 9),   title = \"Volcano plot with mean p-values\",    x_label = \"Interaction effect (log2FC)\",   y_label = \"FDR corrected mean p-value (-log10)\" )  plot_volcano(   data = aggregated_res,    x_var = \"T_obs\",    y_var = \"cct_adj\",    sig_thr = 0.05,    effect_thr = 1,   features = head(interaction_res$feature, 9),   title = \"Volcano plot with CCT-values\",    x_label = \"Interaction effect (log2FC)\",   y_label = \"FDR corrected cct-value (-log10)\" )  plot_pvalue_distribution(   data = aggregated_res,   x_var = \"p_value\",   fill_var = \"ave_expr\",   facet_col = NULL,   facet_levels = NULL,   title = \"P-value distribution\",   x_label = \"P-value\",   y_label = \"Count\",   fill_label = \"Aver. Expr.\\n(logCPM)\" )  plot_pvalue_distribution(   data = aggregated_res,   x_var = \"cct_value\",   fill_var = \"ave_expr\",   facet_col = NULL,   facet_levels = NULL,   title = \"CCT-value distribution\",   x_label = \"CCT-value\",   y_label = \"Count\",   fill_label = \"Aver. Expr.\\n(logCPM)\" )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Katzlberger. Author, maintainer.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Katzlberger D (2025). CrossAncestryGenPhen: Permutation-Based Interaction Testing Across Ancestries. R package version 0.1.0, https://DKatzlberger.github.io/CrossAncestryGenPhen.","code":"@Manual{,   title = {CrossAncestryGenPhen: Permutation-Based Interaction Testing Across Ancestries},   author = {Daniel Katzlberger},   year = {2025},   note = {R package version 0.1.0},   url = {https://DKatzlberger.github.io/CrossAncestryGenPhen}, }"},{"path":[]},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/index.html","id":"package-installation","dir":"","previous_headings":"","what":"📦 Installation","title":"CrossAncestryGenPhen","text":"Install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"DKatzlberger/CrossAncestryGenPhen\")"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/RP_aggregation.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate gene statistics using Rank Product — RP_aggregation","title":"Aggregate gene statistics using Rank Product — RP_aggregation","text":"function aggregates results multiple iterations studies calculating Rank Product (RP) raw p-values, mean test statistics (`T_obs`), proportion significance based FDR-adjusted p-values. Optionally applies jitter p-values break ties low-resolution data. jitter applied, function reports fraction tied p-values iteration mean fraction across iterations help users assess whether jittering might appropriate.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/RP_aggregation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate gene statistics using Rank Product — RP_aggregation","text":"","code":"RP_aggregation(   x,   fdr_threshold = 0.05,   jitter_p = FALSE,   jitter_amount = 1e-06 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/RP_aggregation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate gene statistics using Rank Product — RP_aggregation","text":"x data.frame least following columns: feature: Gene feature identifier. T_obs: Observed test statistic per iteration. p_value: Raw p-value. p_adj: FDR-adjusted p-value. iteration: Replicate study identifier. fdr_threshold Numeric. FDR-adjusted p-value threshold used determine significance (default 0.05). jitter_p Logical. Whether apply small uniform random jitter p-values break ties improve rank resolution (default FALSE). jitter_amount Numeric. Maximum amount uniform noise add p-values jittering (default 1e-6).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/RP_aggregation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate gene statistics using Rank Product — RP_aggregation","text":"data.frame following columns: feature: Gene feature identifier. mean_T_obs: Mean observed test statistics across iterations. RP: Rank Product score (lower = stronger consistent signal). prop_sig: Proportion iterations FDR-adjusted p < fdr_threshold.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/RP_aggregation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate gene statistics using Rank Product — RP_aggregation","text":"","code":"if (FALSE) { # \\dontrun{ result <- RP_aggregation(   combined_results,   jitter_p = TRUE,   jitter_amount = 1e-6 ) head(result) } # }"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/apply_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Row Mask to Expression and Metadata — apply_mask","title":"Apply Row Mask to Expression and Metadata — apply_mask","text":"Subsets expression matrix metadata using row mask.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/apply_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Row Mask to Expression and Metadata — apply_mask","text":"","code":"apply_mask(X, M, mask)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/apply_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Row Mask to Expression and Metadata — apply_mask","text":"X numeric matrix (samples x features). M data.frame-like object metadata (samples x variables). mask logical integer vector rows keep.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/apply_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Row Mask to Expression and Metadata — apply_mask","text":"list `X` `M` subsets.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/boot_correlation_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap-Based Correlation Difference Test (Unstratified) — boot_correlation_diff","title":"Bootstrap-Based Correlation Difference Test (Unstratified) — boot_correlation_diff","text":"Estimates uncertainty correlation difference ancestries X Y (relative reference R), using non-stratified bootstrap resampling within ancestries.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/boot_correlation_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap-Based Correlation Difference Test (Unstratified) — boot_correlation_diff","text":"","code":"boot_correlation_diff(   X,   Y,   R,   MX,   MY,   MR,   g_col,   method = c(\"pearson\", \"spearman\"),   B = 1000,   seed = NULL,   alpha = 0.05 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/boot_correlation_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap-Based Correlation Difference Test (Unstratified) — boot_correlation_diff","text":"X Expression matrix ancestry X (samples x genes) Y Expression matrix ancestry Y R Expression matrix reference ancestry MX Metadata X Metadata Y MR Metadata R g_col Column metadata specifying condition/group (factor 2 levels) method Correlation method: \"pearson\" (default) \"spearman\" B Number bootstrap samples seed Optional seed reproducibility alpha Significance level (e.g., 0.05 95% CI)","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/boot_interaction_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Bootstrap-Based Interaction Estimation with CI Level Control — boot_interaction_effect","title":"Simple Bootstrap-Based Interaction Estimation with CI Level Control — boot_interaction_effect","text":"Estimates variability condition--ancestry interaction effect using non-stratified bootstrap resampling.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/boot_interaction_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Bootstrap-Based Interaction Estimation with CI Level Control — boot_interaction_effect","text":"","code":"boot_interaction_effect(   X,   Y,   MX,   MY,   g_col,   B = 1000,   seed = NULL,   alpha = 0.05 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/boot_interaction_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Bootstrap-Based Interaction Estimation with CI Level Control — boot_interaction_effect","text":"X Expression matrix ancestry (samples x genes) Y Expression matrix ancestry B (samples x genes) MX Metadata X (must include group column) Metadata Y g_col Column metadata condition/group (factor 2 levels) B Number bootstrap samples seed Optional seed reproducibility alpha Significance level (e.g., 0.05 95% CI)","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/boot_interaction_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Bootstrap-Based Interaction Estimation with CI Level Control — boot_interaction_effect","text":"list summary stats bootstrap replicates","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/bootstrap_T_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: Bootstrap Interaction Statistic (Adaptive or Fixed) — bootstrap_T_obs","title":"Internal: Bootstrap Interaction Statistic (Adaptive or Fixed) — bootstrap_T_obs","text":"Computes bootstrapped standard errors 95 observed interaction statistics using nonparametric sampling within ancestries.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/bootstrap_T_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: Bootstrap Interaction Statistic (Adaptive or Fixed) — bootstrap_T_obs","text":"","code":"bootstrap_T_obs(   X,   Y,   MX,   MY,   g_col,   a_col,   g1,   g2,   B = NULL,   seed = NULL,   min_iter = 500,   max_iter = 10000,   tol = 0.001,   batch_size = 100,   check_convergence = TRUE )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/build_T_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Build T-statistic Matrix (Features x Iterations) — build_T_matrix","title":"Build T-statistic Matrix (Features x Iterations) — build_T_matrix","text":"Constructs matrix T statistics rows features columns iterations.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/build_T_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build T-statistic Matrix (Features x Iterations) — build_T_matrix","text":"","code":"build_T_matrix(x, features, iterations)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/check_strata_feasibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Stratification Feasibility — check_strata_feasibility","title":"Check Stratification Feasibility — check_strata_feasibility","text":"Identifies usable, missing, insufficient strata based availability group.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/check_strata_feasibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Stratification Feasibility — check_strata_feasibility","text":"","code":"check_strata_feasibility(strata_X, strata_Y)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/check_strata_feasibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Stratification Feasibility — check_strata_feasibility","text":"strata_X factor overrepresented group strata (e.g., EUR). strata_Y factor underrepresented group strata (e.g., AFR).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/check_strata_feasibility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Stratification Feasibility — check_strata_feasibility","text":"list `usable`, `missing`, `insufficient` strata names.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_T_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Test Statistic for Permutation — compute_T_stat","title":"Compute Test Statistic for Permutation — compute_T_stat","text":"Computes interaction effect: difference group-level differences. Returns NA vector subgroup empty.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_T_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Test Statistic for Permutation — compute_T_stat","text":"","code":"compute_T_stat(XY, g_XY, p1, p2, g1, g2)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_T_stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Test Statistic for Permutation — compute_T_stat","text":"XY matrix features. g_XY factor group labels corresponding rows `XY`. p1 Indices first permutation group. p2 Indices second permutation group. g1 First group label. g2 Second group label.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_T_stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Test Statistic for Permutation — compute_T_stat","text":"numeric vector test statistics NA values.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_correlation_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Correlation Matrix from Long-format Data — compute_correlation_matrix","title":"Compute Correlation Matrix from Long-format Data — compute_correlation_matrix","text":"Transforms long-format data wide format computes correlation matrix across iterations.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_correlation_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Correlation Matrix from Long-format Data — compute_correlation_matrix","text":"","code":"compute_correlation_matrix(x, value_col, iter_col, method = \"pearson\")"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_correlation_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Correlation Matrix from Long-format Data — compute_correlation_matrix","text":"x data frame data.table columns `feature`, user-defined iteration column, value column. value_col name column pivot (e.g., \"p_value\" \"T_obs\"). iter_col name column treat \"iteration\" (e.g., \"sample_id\", \"perm_id\"). method Correlation method: one \"pearson\", \"spearman\", \"kendall\".","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_correlation_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Correlation Matrix from Long-format Data — compute_correlation_matrix","text":"correlation matrix NA diagonal.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_empirical_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical P-Values — compute_empirical_p","title":"Empirical P-Values — compute_empirical_p","text":"Computes two-sided empirical p-values.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_empirical_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical P-Values — compute_empirical_p","text":"","code":"compute_empirical_p(   T_obs,   T_null,   alternative = c(\"two.sided\", \"greater\", \"less\") )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_empirical_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical P-Values — compute_empirical_p","text":"T_obs numeric vector observed test statistics. T_null numeric vector null distribution test statistics.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_empirical_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical P-Values — compute_empirical_p","text":"numeric vector p-values.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_empirical_pvalues.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical P-Values — compute_empirical_pvalues","title":"Empirical P-Values — compute_empirical_pvalues","text":"Computes two-sided empirical p-values.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_empirical_pvalues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical P-Values — compute_empirical_pvalues","text":"","code":"compute_empirical_pvalues(T_boot, T_obs)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_empirical_pvalues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical P-Values — compute_empirical_pvalues","text":"T_boot matrix bootstrapped test statistics. T_obs numeric vector observed test statistics.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_empirical_pvalues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical P-Values — compute_empirical_pvalues","text":"numeric vector p-values.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_gls_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute GLS Estimate — compute_gls_estimate","title":"Compute GLS Estimate — compute_gls_estimate","text":"Computes weighted average estimate using Generalized Least Squares, accounting heteroskedasticity correlation via supplied covariance structure.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_gls_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute GLS Estimate — compute_gls_estimate","text":"","code":"compute_gls_estimate(T_vec, SE_vec, R_mat)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_jaccard_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Jaccard Similarity Matrix Between Iterations — compute_jaccard_matrix","title":"Compute Jaccard Similarity Matrix Between Iterations — compute_jaccard_matrix","text":"Calculates pairwise Jaccard indices iterations based sample usage. Useful assessing overlap dependence train/test/inference sets across iterations.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_jaccard_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Jaccard Similarity Matrix Between Iterations — compute_jaccard_matrix","text":"","code":"compute_jaccard_matrix(id_usage, role)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_jaccard_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Jaccard Similarity Matrix Between Iterations — compute_jaccard_matrix","text":"id_usage data.frame columns ids, role, iteration, output track_sample_ids. role character string specifying sample role evaluate (\"test\", \"train\", \"inference\").","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_jaccard_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Jaccard Similarity Matrix Between Iterations — compute_jaccard_matrix","text":"square matrix Jaccard indices dimensions iterations × iterations.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_jaccard_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Jaccard Similarity Matrix Between Iterations — compute_jaccard_matrix","text":"Jaccard index computed : $$J(, j) = |A_i ∩ A_j| / |A_i ∪ A_j|$$ \\(A_i\\) \\(A_j\\) sets sample IDs used specified role iterations j.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_jaccard_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Jaccard Similarity Matrix Between Iterations — compute_jaccard_matrix","text":"","code":"# Assume `id_usage` is created using multiple splits and track_sample_ids() jaccard_test <- compute_jaccard_matrix(id_usage, role = \"test\") #> Error: object 'id_usage' not found jaccard_train <- compute_jaccard_matrix(id_usage, role = \"train\") #> Error: object 'id_usage' not found"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_qq_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene-wise quantile correlations — compute_qq_correlation","title":"Gene-wise quantile correlations — compute_qq_correlation","text":"Computes gene-wise correlation empirical theoretical quantiles, typically Q-Q plots, visualizes distribution correlations histogram using ggplot2.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_qq_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene-wise quantile correlations — compute_qq_correlation","text":"","code":"compute_qq_correlation(   empirical,   theoretical,   method = c(\"pearson\", \"spearman\"),   title = NULL,   x_label = NULL,   y_label = NULL,   bins = 50 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_qq_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene-wise quantile correlations — compute_qq_correlation","text":"empirical numeric matrix empirical quantiles (quantiles × genes) theoretical numeric matrix theoretical quantiles (dimensions empirical) method Character string specifying correlation method: \"pearson\" (default) \"spearman\" title Optional main title histogram plot x_label Optional label x-axis (default depends method) y_label Optional label y-axis (default: \"Count\") bins Integer specifying number bins histogram (default: 50)","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/compute_qq_correlation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene-wise quantile correlations — compute_qq_correlation","text":"named list following elements: cors numeric vector correlation values (length = number genes) method correlation method used plot ggplot2 object showing histogram correlations","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/estimate_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate RNA-seq Model Parameters from Count Data — estimate_params","title":"Estimate RNA-seq Model Parameters from Count Data — estimate_params","text":"Estimate gene-level mean expression dispersion parameters RNA-seq count data using edgeR. function fits intercept-GLM model compute maximum likelihood estimates (MLE) maximum posteriori (MAP) estimates means dispersions, along raw logCPM means.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/estimate_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate RNA-seq Model Parameters from Count Data — estimate_params","text":"","code":"estimate_params(X, seed = NULL)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/estimate_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate RNA-seq Model Parameters from Count Data — estimate_params","text":"X Numeric matrix raw RNA-seq counts samples rows genes columns.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/estimate_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate RNA-seq Model Parameters from Count Data — estimate_params","text":"list following elements: mains List basic dataset information:     n_samples (integer), n_features (integer),     features (gene IDs). means List mean expression estimates:     raw (raw mean counts),     logcpm (mean log2 CPM),     mle (fitted values MLE dispersion),     map (fitted values MAP dispersion),     libnorm_mle (MLE fitted means normalized effective library size),     libnorm_map (MAP fitted means normalized effective library size). disps List dispersion estimates:     common (common dispersion),     trend (trended dispersion),     mle (tagwise dispersion without prior),     map (tagwise dispersion prior). libsize Numeric scalar giving mean effective library size.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/estimate_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate RNA-seq Model Parameters from Count Data — estimate_params","text":"function uses intercept-design matrix estimate baseline mean expression dispersion parameters across samples. effective library size computed product raw library size normalization factor estimated calcNormFactors. Important: input X must matrix samples rows genes columns. Internally, function transposes X match gene--sample format expected edgeR.","code":""},{"path":[]},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/get_strata.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Stratification Factor — get_strata","title":"Create Stratification Factor — get_strata","text":"Combines metadata columns factor stratified sampling.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/get_strata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Stratification Factor — get_strata","text":"","code":"get_strata(M, stratify_cols)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/get_strata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Stratification Factor — get_strata","text":"M data.frame-like object containing metadata. stratify_cols character vector column names stratify .","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/get_strata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Stratification Factor — get_strata","text":"factor indicating stratification strata.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/ggsaveDK.html","id":null,"dir":"Reference","previous_headings":"","what":"Save ggplot with optional legend removal and sensible defaults — ggsaveDK","title":"Save ggplot with optional legend removal and sensible defaults — ggsaveDK","text":"Save ggplot optional legend removal sensible defaults","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/ggsaveDK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save ggplot with optional legend removal and sensible defaults — ggsaveDK","text":"","code":"ggsaveDK(filename, plot, legend = TRUE, width = 7, height = 7, dpi = 300, ...)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/ggsaveDK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save ggplot with optional legend removal and sensible defaults — ggsaveDK","text":"filename File path save . plot ggplot object. legend Logical. FALSE, removes legend saving. width Width inches. Default 7. height Height inches. Default 7. dpi Dots per inch. Default 300. ... Additional arguments passed ggsave().","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/ggsaveDK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save ggplot with optional legend removal and sensible defaults — ggsaveDK","text":"Invisibly returns saved plot.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/inject_DEG_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Inject Simulated DEGs and Interaction Effects into NB Counts — inject_DEG_signal","title":"Inject Simulated DEGs and Interaction Effects into NB Counts — inject_DEG_signal","text":"Takes output `simulate_NB_counts()` injects differential expression adjusting counts selected genes groups.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/inject_DEG_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inject Simulated DEGs and Interaction Effects into NB Counts — inject_DEG_signal","text":"","code":"inject_DEG_signal(   sim_data,   n_degs = 1000,   log2fc = 1.5,   prop_interaction = 0.3,   seed = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/inject_DEG_signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inject Simulated DEGs and Interaction Effects into NB Counts — inject_DEG_signal","text":"sim_data Output `simulate_NB_counts()`. n_degs Total number DEGs inject. log2fc Log2 fold change DEGs. prop_interaction Proportion DEGs interaction effects. seed Optional random seed.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/inject_DEG_signal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inject Simulated DEGs and Interaction Effects into NB Counts — inject_DEG_signal","text":"list updated counts, sample info, DEG metadata.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/limma_interaction_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Limma-Based Interaction Test — limma_interaction_effect","title":"Limma-Based Interaction Test — limma_interaction_effect","text":"Computes gene-wise interaction statistics using limma difference group effects ancestries (ancestry X minus ancestry Y), matching logic perm_interaction.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/limma_interaction_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Limma-Based Interaction Test — limma_interaction_effect","text":"","code":"limma_interaction_effect(   X,   Y,   MX,   MY,   g_col,   a_col,   covariates = NULL,   use_voom = TRUE,   verbose = TRUE )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/limma_interaction_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Limma-Based Interaction Test — limma_interaction_effect","text":"X Expression matrix ancestry X. Rows = samples, columns = genes. Y Expression matrix ancestry Y. Rows = samples, columns = genes. MX Metadata X. Must include group ancestry columns. Metadata Y. Must include group ancestry columns. g_col Name column indicating group (factor 1). a_col Name column indicating ancestry (factor 2). covariates Optional vector covariate column names adjust . verbose Logical, whether print messages.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/limma_interaction_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Limma-Based Interaction Test — limma_interaction_effect","text":"list : summary_stats data.frame gene-level interaction coefficients, p-values, FDR, confidence intervals. fit full limma model fit. group_levels Factor levels used group variable. ancestry_levels Factor levels used ancestry variable. coef Name interaction coefficient extracted.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/loo_interaction_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Leave-One-Out Diagnostic for interaction effects — loo_interaction_effect","title":"Leave-One-Out Diagnostic for interaction effects — loo_interaction_effect","text":"Computes leave-one-diagnostics feature dropping sample one time ancestry dataset. Shows much sample influences interaction effect estimate.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/loo_interaction_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leave-One-Out Diagnostic for interaction effects — loo_interaction_effect","text":"","code":"loo_interaction_effect(X, Y, MX, MY, g_col, a_col, feature)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/loo_interaction_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leave-One-Out Diagnostic for interaction effects — loo_interaction_effect","text":"X numeric matrix data.frame expression values ancestry . Y numeric matrix data.frame expression values ancestry B. MX data.frame metadata X. Must include column condition/group labels. data.frame metadata Y. Must include column condition/group labels. g_col String. Name column `MX` `` defines condition/group (must factor exactly 2 levels). a_col String. Name column `MX` `` defines ancestry. feature Character numeric vector. Names indices features (columns) test.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/loo_interaction_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Leave-One-Out Diagnostic for interaction effects — loo_interaction_effect","text":"tidy data.frame columns: feature Feature name index. sample Sample name left . T_loo Interaction effect sample left . T_obs Original full-sample interaction effect. ancestry Ancestry sample (\"eur\" \"afr\").","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/mean_diff_by_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean Difference Between Group Levels — mean_diff_by_group","title":"Mean Difference Between Group Levels — mean_diff_by_group","text":"Computes column mean difference two group levels.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/mean_diff_by_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean Difference Between Group Levels — mean_diff_by_group","text":"","code":"mean_diff_by_group(data, group, g1, g2)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/mean_diff_by_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean Difference Between Group Levels — mean_diff_by_group","text":"data matrix data frame numeric features. group factor indicating group membership row. g1 reference level. g2 comparison level.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/mean_diff_by_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean Difference Between Group Levels — mean_diff_by_group","text":"numeric vector mean differences.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/param_gls_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric GLS Feature Summary Across Iterations — param_gls_summary","title":"Parametric GLS Feature Summary Across Iterations — param_gls_summary","text":"Aggregates feature-level test statistics across iterations using Generalized Least Squares (GLS) framework, assuming normality GLS estimator. Computes parametric p-values summary statistics feature.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/param_gls_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric GLS Feature Summary Across Iterations — param_gls_summary","text":"","code":"param_gls_summary(x, alpha = 0.05)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/param_gls_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric GLS Feature Summary Across Iterations — param_gls_summary","text":"x data frame long format columns: `feature`, `iteration`, `T_obs`, `SE`, `p_adj`. alpha Numeric. Significance threshold used compute proportion significant iterations.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/param_gls_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parametric GLS Feature Summary Across Iterations — param_gls_summary","text":"data frame feature, GLS estimate, SE, z-score, p-value, FDR-adjusted p-value, prop_signif.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_aggregate_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation-Based Aggregation Test for Feature Sets — perm_aggregate_sets","title":"Permutation-Based Aggregation Test for Feature Sets — perm_aggregate_sets","text":"Performs permutation testing feature-level aggregated statistics. function computes observed test statistic per feature using specified aggregation function (e.g., mean), compares null distribution obtained permuting values within feature set.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_aggregate_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation-Based Aggregation Test for Feature Sets — perm_aggregate_sets","text":"","code":"perm_aggregate_sets(   x,   T_col,   feature_col,   agg_fun = mean,   alternative = c(\"two.sided\", \"greater\", \"less\"),   B = 1000,   seed = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_aggregate_sets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation-Based Aggregation Test for Feature Sets — perm_aggregate_sets","text":"x data.frame data.table containing test statistics feature assignments. T_col Character. name column x contains test statistic aggregate. feature_col Character. name column x defines feature groups. agg_fun Function. Aggregation function applied feature set (e.g., mean, median). Defaults mean. alternative Character. alternative hypothesis. One \"two.sided\", \"greater\", \"less\". B Integer. Number permutations perform. Defaults 1000. seed Integer NULL. Random seed reproducibility. Defaults NULL.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_aggregate_sets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation-Based Aggregation Test for Feature Sets — perm_aggregate_sets","text":"data.frame one row per feature containing: feature – Feature name. T_obs – Observed aggregated test statistic. p_value – Empirical p-value. p_adj – FDR-adjusted p-value (Benjamini-Hochberg). alternative – specified alternative hypothesis.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_aggregate_sets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation-Based Aggregation Test for Feature Sets — perm_aggregate_sets","text":"","code":"set.seed(123) df <- data.frame(   stat = rnorm(300),   gene_set = rep(letters[1:10], each = 30) ) result <- perm_aggregate_sets(df, T_col = \"stat\", feature_col = \"gene_set\", B = 100) #> Error in tapply(x$p_adj < alpha, x[[feature_col]], mean, na.rm = TRUE): arguments must have same length head(result) #> Error: object 'result' not found"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_correlation_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Permutation Test for Correlation Differences — perm_correlation_diff","title":"Simple Permutation Test for Correlation Differences — perm_correlation_diff","text":"Tests whether correlation condition effects ancestries X Y reference ancestry R differs. bootstrapping convergence logic.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_correlation_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Permutation Test for Correlation Differences — perm_correlation_diff","text":"","code":"perm_correlation_diff(   X,   Y,   R,   MX,   MY,   MR,   g_col,   method = c(\"pearson\", \"spearman\"),   B = 1000,   seed = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_correlation_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Permutation Test for Correlation Differences — perm_correlation_diff","text":"X Matrix expression values (ancestry 1); samples x genes Y Matrix expression values (ancestry 2) R Matrix expression values (reference ancestry) MX Metadata X; must contain group column Metadata Y MR Metadata R g_col Column metadata specifying condition/group (factor 2 levels) method Correlation method: \"pearson\" (default) \"spearman\" B Number permutations seed Random seed (optional) permute Logical; whether run permutation test","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_correlation_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Permutation Test for Correlation Differences — perm_correlation_diff","text":"list summary statistics null distribution","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_correlation_difference.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Permutation Test for Correlation Differences — perm_correlation_difference","title":"Simple Permutation Test for Correlation Differences — perm_correlation_difference","text":"Tests whether correlation condition effects ancestries X Y reference ancestry R differs. bootstrapping convergence logic.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_correlation_difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Permutation Test for Correlation Differences — perm_correlation_difference","text":"","code":"perm_correlation_difference(   X,   Y,   R,   MX,   MY,   MR,   g_col,   method = c(\"pearson\", \"spearman\"),   B = 1000,   seed = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_correlation_difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Permutation Test for Correlation Differences — perm_correlation_difference","text":"X Matrix expression values (ancestry 1); samples x genes Y Matrix expression values (ancestry 2) R Matrix expression values (reference ancestry) MX Metadata X; must contain group column Metadata Y MR Metadata R g_col Column metadata specifying condition/group (factor 2 levels) method Correlation method: \"pearson\" (default) \"spearman\" B Number permutations seed Random seed (optional)","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_correlation_difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Permutation Test for Correlation Differences — perm_correlation_difference","text":"list summary statistics null distribution","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_diff_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation-Based Interaction Test with Mandatory Bootstrapped Inference — perm_diff_interaction","title":"Permutation-Based Interaction Test with Mandatory Bootstrapped Inference — perm_diff_interaction","text":"Performs permutation test (optional) interaction effects conditions across ancestries. Always estimates bootstrapped standard errors confidence intervals observed interaction effects via resampling within ancestries.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_diff_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation-Based Interaction Test with Mandatory Bootstrapped Inference — perm_diff_interaction","text":"","code":"perm_diff_interaction(   X,   Y,   MX,   MY,   g_col,   a_col,   seed = NULL,   B = 1000,   permute = TRUE,   min_iter = 500,   max_iter = 10000,   tol = 0.001,   batch_size = 100,   check_convergence = TRUE )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_diff_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation-Based Interaction Test with Mandatory Bootstrapped Inference — perm_diff_interaction","text":"X numeric matrix expression values ancestry (rows = samples, columns = genes). Y numeric matrix expression values ancestry B (format X). MX data.frame metadata X, must include columns group ancestry. data.frame metadata Y, must include columns group ancestry. g_col Column name metadata indicating condition/group (factor 2 levels). a_col Column name metadata indicating ancestry (must unique per ancestry). seed Optional integer set random seed reproducibility. B Integer. Number permutations bootstraps perform. Set NULL adaptive convergence. permute Logical. Whether perform permutation-based interaction testing. min_iter Minimum number permutations/bootstraps run checking convergence. max_iter Maximum number permutations/bootstraps allowed. tol Tolerance threshold convergence (applies empirical p-values bootstrap SEs). batch_size Number permutations/bootstraps add per iteration. check_convergence Logical. Whether check convergence fixed-B mode (permute = TRUE).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_diff_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation-Based Interaction Test with Mandatory Bootstrapped Inference — perm_diff_interaction","text":"list : summary_stats data.frame gene-wise observed statistics (T_obs),                        bootstrapped standard errors (SE),                        95% confidence intervals (CI_lower, CI_upper),                        empirical p-values (p_value, NA permute = FALSE),                        Benjamini-Hochberg adjusted p-values (p_adj, NA permute = FALSE). T_perm Matrix permutation-based test statistics (NULL permute = FALSE). T_boot Matrix bootstrap-based observed statistics (rows = bootstraps, columns = genes). B_used_perm Number valid permutations used (NA permute = FALSE). B_used_boot Number valid bootstrap replicates used. converged_perm Logical indicating permutation p-values converged (NA permute = FALSE). converged_boot Logical indicating bootstrap SEs converged.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_diff_interaction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Permutation-Based Interaction Test with Mandatory Bootstrapped Inference — perm_diff_interaction","text":"Permutation testing can toggled using `permute` flag. `permute = FALSE`, bootstrapped confidence intervals standard errors provided, p-values returned NA. input expression matrices must samples rows genes columns.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation-Based Interaction Test with Mandatory Bootstrapped Inference — perm_interaction","title":"Permutation-Based Interaction Test with Mandatory Bootstrapped Inference — perm_interaction","text":"Performs permutation test (optional) interaction effects conditions across ancestries. Always estimates bootstrapped standard errors confidence intervals observed interaction effects via resampling within ancestries.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation-Based Interaction Test with Mandatory Bootstrapped Inference — perm_interaction","text":"","code":"perm_interaction(   X,   Y,   MX,   MY,   g_col,   a_col,   B = 1000,   seed = NULL,   permute = TRUE,   min_iter = 500,   max_iter = 10000,   tol = 0.001,   batch_size = 100,   check_convergence = TRUE )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation-Based Interaction Test with Mandatory Bootstrapped Inference — perm_interaction","text":"X numeric matrix expression values ancestry (rows = samples, columns = genes). Y numeric matrix expression values ancestry B (format X). MX data.frame metadata X, must include columns group ancestry. data.frame metadata Y, must include columns group ancestry. g_col Column name metadata indicating condition/group (factor 2 levels). a_col Column name metadata indicating ancestry (must unique per ancestry). B Integer. Number permutations bootstraps perform. Set NULL adaptive convergence. seed Optional integer set random seed reproducibility. permute Logical. Whether perform permutation-based interaction testing. min_iter Minimum number permutations/bootstraps run checking convergence. max_iter Maximum number permutations/bootstraps allowed. tol Tolerance threshold convergence (applies empirical p-values bootstrap SEs). batch_size Number permutations/bootstraps add per iteration. check_convergence Logical. Whether check convergence fixed-B mode (permute = TRUE).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation-Based Interaction Test with Mandatory Bootstrapped Inference — perm_interaction","text":"list : summary_stats data.frame gene-wise observed statistics (T_obs),                        bootstrapped standard errors (SE),                        95% confidence intervals (CI_lower, CI_upper),                        empirical p-values (p_value, NA permute = FALSE),                        Benjamini-Hochberg adjusted p-values (p_adj, NA permute = FALSE). T_perm Matrix permutation-based test statistics (NULL permute = FALSE). T_boot Matrix bootstrap-based observed statistics (rows = bootstraps, columns = genes). B_used_perm Number valid permutations used (NA permute = FALSE). B_used_boot Number valid bootstrap replicates used. converged_perm Logical indicating permutation p-values converged (NA permute = FALSE). converged_boot Logical indicating bootstrap SEs converged.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_interaction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Permutation-Based Interaction Test with Mandatory Bootstrapped Inference — perm_interaction","text":"Permutation testing can toggled using `permute` flag. `permute = FALSE`, bootstrapped confidence intervals standard errors provided, p-values returned NA. input expression matrices must samples rows genes columns.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_interaction_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Permutation-Based Interaction Test (No Bootstrapping, No Convergence) — perm_interaction_effect","title":"Simple Permutation-Based Interaction Test (No Bootstrapping, No Convergence) — perm_interaction_effect","text":"Tests condition effects (g1 vs g2) different ancestries using permutation.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_interaction_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Permutation-Based Interaction Test (No Bootstrapping, No Convergence) — perm_interaction_effect","text":"","code":"perm_interaction_effect(X, Y, MX, MY, g_col, B = 1000, seed = NULL)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_interaction_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Permutation-Based Interaction Test (No Bootstrapping, No Convergence) — perm_interaction_effect","text":"X Expression matrix ancestry (samples x genes) Y Expression matrix ancestry B (samples x genes) MX Metadata X (must include group ancestry columns) Metadata Y g_col Column metadata condition/group (factor 2 levels) B Number permutations seed Optional seed reproducibility","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_interaction_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Permutation-Based Interaction Test (No Bootstrapping, No Convergence) — perm_interaction_effect","text":"list summary stats, permutation matrix, number valid permutations","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_prediction_difference.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation Test for Prediction Performance Differences — perm_prediction_difference","title":"Permutation Test for Prediction Performance Differences — perm_prediction_difference","text":"function compares model prediction performance two datasets (e.g., different ancestries) using reference training set. trains classification model using tidymodels, evaluates test inference datasets, assesses statistical significance performance difference via permutation testing.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_prediction_difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Test for Prediction Performance Differences — perm_prediction_difference","text":"","code":"perm_prediction_difference(   X,   Y,   R,   MX,   MY,   MR,   g_col,   method = c(\"glmnet\", \"rf\"),   metric = c(\"roc_auc\"),   cv_folds = 5,   tune_len = 10,   max_iter = 1000,   B = 1000,   seed = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_prediction_difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Test for Prediction Performance Differences — perm_prediction_difference","text":"X Matrix predictors test group (ancestry 1); samples x features Y Matrix predictors inference group (ancestry 2) R Matrix predictors reference training group MX Data frame metadata `X`, must include outcome column Data frame metadata `Y` MR Data frame metadata `R` g_col Character. Name column `MX`, ``, `MR` containing binary outcome (must exactly 2 levels). method Character. model use: `\"glmnet\"` (default) `\"rf\"` (random forest). metric Character. Performance metric optimize test, currently supports `\"roc_auc\"` . cv_folds Integer. Number cross-validation folds (default = 5). tune_len Integer. Number levels per hyperparameter grid search (default = 10). max_iter Integer. used currently reserved future logic (default = 1000). B Integer. Number permutations run (default = 1000). seed Optional integer seed reproducibility.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/perm_prediction_difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation Test for Prediction Performance Differences — perm_prediction_difference","text":"list containing: summary_stats data frame observed statistic, group metrics, p-value T_null Null distribution test statistic permutations B_used Number successful permutations","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/permute_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Permutation of Indices — permute_indices","title":"Random Permutation of Indices — permute_indices","text":"Returns random split indices two groups.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/permute_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Permutation of Indices — permute_indices","text":"","code":"permute_indices(n_total, n1)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/permute_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Permutation of Indices — permute_indices","text":"n_total Total number samples. n1 Size first group.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/permute_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Permutation of Indices — permute_indices","text":"list two index vectors: `p1` `p2`.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_BCV.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean–Dispersion Scatter Plot with Optional Overlay — plot_BCV","title":"Mean–Dispersion Scatter Plot with Optional Overlay — plot_BCV","text":"Plots (optionally log-transformed) means vs dispersions one dataset, optional second dataset overlaid. Points first dataset drawn black; optional overlay drawn red.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_BCV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean–Dispersion Scatter Plot with Optional Overlay — plot_BCV","text":"","code":"plot_BCV(   estimates_X,   estimates_Y = NULL,   method = c(\"mle\", \"map\"),   log = TRUE,   ancestry_X = \"Dataset X\",   ancestry_Y = \"Dataset Y\",   title = NULL,   x_label = NULL,   y_label = NULL,   point_size = 1 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_BCV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean–Dispersion Scatter Plot with Optional Overlay — plot_BCV","text":"estimates_X list components `means` `disps`. list keyed method (e.g., `list(mle = <num>, map = <num>)`), entry numeric vector length. estimates_Y Optional overlay structure `estimates_X` (.e., list `means` `disps`, list keyed `method`). method Character; estimate plot. One `\"mle\"` `\"map\"`. log Logical; `TRUE`, apply `log2()` means dispersions **** plotting (recommended values span orders magnitude). ancestry_X Character label primary dataset (used legend/title/labels). ancestry_Y Character label overlay dataset (used legend/title/labels). title Optional plot title. `NULL`, sensible default created, mentioning ancestry labels colors (black/red). x_label Optional x-axis label. `NULL`, dynamic default constructed: `\"Log2 MLE means (Dataset X)\"` (similar), depending `log`, `method`, whether overlay present. y_label Optional y-axis label. `NULL`, dynamic default constructed: `\"Log2 MLE dispersions (Dataset X)\"` (similar), depending `log`, `method`, whether overlay present. point_size Numeric; point size passed `geom_point()`. Default `1`.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_BCV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean–Dispersion Scatter Plot with Optional Overlay — plot_BCV","text":"`ggplot` object.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_BCV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mean–Dispersion Scatter Plot with Optional Overlay — plot_BCV","text":"`log = TRUE`, values transformed `log2()` **** plotting, axes ggplot linear (log scales). Non-finite points created transform (e.g., non-positive inputs) dropped.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_BCV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean–Dispersion Scatter Plot with Optional Overlay — plot_BCV","text":"","code":"if (FALSE) { # \\dontrun{ # Suppose you have lists like: # estimates_X <- list( #   means = list(mle = runif(100, 1, 100), map = runif(100, 1, 100)), #   disps = list(mle = runif(100, 1, 10),  map = runif(100, 1, 10)) # ) # estimates_Y <- similar structure...  # Single dataset (black), pre-log2: plot_BCV(estimates_X, method = \"mle\", log = TRUE, ancestry_X = \"EUR\")  # With overlay (EUR black vs AFR red), no log transform: plot_BCV(   estimates_X, estimates_Y,   method = \"map\", log = FALSE,   ancestry_X = \"EUR\", ancestry_Y = \"AFR\" ) } # }"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_T_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot T-Statistic Distributions with Observed Values and Annotations — plot_T_distribution","title":"Plot T-Statistic Distributions with Observed Values and Annotations — plot_T_distribution","text":"function visualizes empirical null distributions T-statistics selected features (e.g., genes) using either permutation- bootstrap-based inference. overlays observed T-statistics dashed lines, bootstrapping used, adds 95 inference, empirical p-values shown facet titles.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_T_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot T-Statistic Distributions with Observed Values and Annotations — plot_T_distribution","text":"","code":"plot_T_distribution(   x,   features = NULL,   statistic = c(\"T_null\", \"T_boot\"),   title = NULL,   point_size = 0.5 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_T_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot T-Statistic Distributions with Observed Values and Annotations — plot_T_distribution","text":"x named list output perm_interaction_effect() similar, containing null distributions summary statistics. Must include summary_stats data frame either T_perm T_boot depending statistic type. features Character vector feature names plot. NULL, first 9 features (columns) selected null matrix used. statistic Character string indicating null distribution plot. Must either \"T_perm\" (permutation) \"T_boot\" (bootstrap). title Optional title entire plot. point_size Numeric value control relative font point size (actively used version).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_T_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot T-Statistic Distributions with Observed Values and Annotations — plot_T_distribution","text":"ggplot object consisting histograms test statistics per feature, vertical         lines showing observed values either p-values (permutations) confidence intervals         (bootstraps).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_T_distribution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot T-Statistic Distributions with Observed Values and Annotations — plot_T_distribution","text":"function automatically creates facet plots feature selected. statistic = \"T_perm\", observed test statistic plotted dashed blue line, empirical p-value included facet label. statistic = \"T_boot\", observed value plotted dashed blue line 95 required null distribution missing input object, function throw informative error.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_confusion_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a binary confusion matrix as a heatmap with TP, FP, FN, TN labels. — plot_confusion_matrix","title":"Plot a binary confusion matrix as a heatmap with TP, FP, FN, TN labels. — plot_confusion_matrix","text":"Computes confusion matrix binary classification tasks. Takes binary vectors true predicted labels. Uses `target` value define positive class. Cells labeled TP, FP, FN, TN counts. Class labels shown \"1\" (positive) \"0\" (negative). Uses ggplot2 simple blue color scale.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_confusion_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a binary confusion matrix as a heatmap with TP, FP, FN, TN labels. — plot_confusion_matrix","text":"","code":"plot_confusion_matrix(   y_true,   y_selected,   target = 1,   title = NULL,   x_label = NULL,   y_label = NULL,   caption = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_confusion_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a binary confusion matrix as a heatmap with TP, FP, FN, TN labels. — plot_confusion_matrix","text":"y_true Vector true labels (numeric, factor, logical). y_selected Vector predicted labels (numeric, factor, logical). target value treated positive class. title Optional plot title. x_label Optional x-axis label (default: \"True Label\"). y_label Optional y-axis label (default: \"Predicted Label\").","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_confusion_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a binary confusion matrix as a heatmap with TP, FP, FN, TN labels. — plot_confusion_matrix","text":"ggplot2 object showing confusion matrix heatmap.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_correlation_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot correlation differences with optional facets — plot_correlation_diff","title":"Plot correlation differences with optional facets — plot_correlation_diff","text":"Create bar plot comparing correlation values across conditions.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_correlation_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot correlation differences with optional facets — plot_correlation_diff","text":"","code":"plot_correlation_diff(   x,   cor_cols = c(\"XR\", \"YR\"),   t_col,   p_col,   facet_col = NULL,   facet_levels = NULL,   x_label = NULL,   y_label = NULL,   title = NULL,   point_size = 0.5 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_correlation_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot correlation differences with optional facets — plot_correlation_diff","text":"x data.frame data.table required columns. cor_cols Two columns correlation values compare. t_col Column T statistic values annotation. p_col Column p-values annotation. facet_col Optional column use faceting. facet_levels Optional facet values include plot. x_label Label x-axis (default NULL). y_label Label y-axis (default NULL). title Optional plot title.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_correlation_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot correlation differences with optional facets — plot_correlation_diff","text":"ggplot2 object showing correlation comparison.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_correlation_difference.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot correlation differences with optional facets — plot_correlation_difference","title":"Plot correlation differences with optional facets — plot_correlation_difference","text":"Create bar plot comparing correlation values across conditions.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_correlation_difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot correlation differences with optional facets — plot_correlation_difference","text":"","code":"plot_correlation_difference(   x,   cor_cols = c(\"XR\", \"YR\"),   t_col,   p_col,   facet_col = NULL,   facet_levels = NULL,   x_label = NULL,   y_label = NULL,   title = NULL,   point_size = 0.5 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_correlation_difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot correlation differences with optional facets — plot_correlation_difference","text":"x data.frame data.table required columns. cor_cols Two columns correlation values compare. t_col Column T statistic values annotation. p_col Column p-values annotation. facet_col Optional column use faceting. facet_levels Optional facet values include plot. x_label Label x-axis (default NULL). y_label Label y-axis (default NULL). title Optional plot title.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_correlation_difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot correlation differences with optional facets — plot_correlation_difference","text":"ggplot2 object showing correlation comparison.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_correlation_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"ComplexHeatmap of Correlation Matrix Across Iterations — plot_correlation_heatmap","title":"ComplexHeatmap of Correlation Matrix Across Iterations — plot_correlation_heatmap","text":"Computes correlation values (e.g., p-values, t-statistics) across iterations per feature, reshapes data wide format, calculates correlation matrix, visualizes clustered heatmap.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_correlation_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ComplexHeatmap of Correlation Matrix Across Iterations — plot_correlation_heatmap","text":"","code":"plot_correlation_heatmap(   data,   value_col,   iter_col,   method = \"pearson\",   row_names = NULL,   title = NULL,   file = NULL,   width = 8,   height = 8 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_correlation_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ComplexHeatmap of Correlation Matrix Across Iterations — plot_correlation_heatmap","text":"data data frame columns: `feature`, iteration column (e.g., `perm_id`), numeric value column (e.g., `p_value`, `T_obs`). value_col string specifying column name `data` use correlation (e.g., `\"p_value\"` `\"T_obs\"`). iter_col string specifying column name `data` use iteration identifier (e.g., `\"iteration\"`, `\"perm_id\"`). method string specifying correlation method use. One `\"pearson\"` (default), `\"spearman\"`, `\"kendall\"`. row_names Optional string display row title heatmap. title Optional string main heatmap title. file Optional file path save plot (e.g., `\"plot.pdf\"` `\"plot.png\"`). `NULL`, plot shown interactively. width Width plot inches (default = 8). height Height plot inches (default = 8).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_correlation_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ComplexHeatmap of Correlation Matrix Across Iterations — plot_correlation_heatmap","text":"Invisibly returns `NULL`. function called side effect drawing saving heatmap.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_correlation_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ComplexHeatmap of Correlation Matrix Across Iterations — plot_correlation_heatmap","text":"function useful visualizing stability similarity given statistic (like p-values test statistics) across multiple iterations resampling runs. internally uses `compute_correlation_matrix()` compute correlation matrix. upper triangle matrix used calculate summary mean correlation, displayed heatmap.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_estimated_dispersions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Estimated Gene Dispersions Between Two Datasets — plot_estimated_dispersions","title":"Plot Estimated Gene Dispersions Between Two Datasets — plot_estimated_dispersions","text":"function creates scatter plot comparing gene-wise dispersion estimates two datasets (`estimates_X` `estimates_Y`) specified dispersion method. diagonal reference line (slope = 1) included. Points can optionally colored number random outliers introduced per gene (continuous scale).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_estimated_dispersions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Estimated Gene Dispersions Between Two Datasets — plot_estimated_dispersions","text":"","code":"plot_estimated_dispersions(   estimates_X,   estimates_Y,   method = c(\"mle\", \"map\"),   log = TRUE,   ancestry_X = \"Dataset X\",   ancestry_Y = \"Dataset Y\",   title = NULL,   x_label = NULL,   y_label = NULL,   point_size = 1 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_estimated_dispersions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Estimated Gene Dispersions Between Two Datasets — plot_estimated_dispersions","text":"estimates_X list returned `estimate_params()` dataset X. Must contain `disps` sublist. estimates_Y list returned `estimate_params()` dataset Y. Must contain `disps` sublist. method Character. Dispersion type compare. One `\"mle\"` `\"map\"`. log Logical. `TRUE` (default), applies `log10` transformation dispersion values. ancestry_X Label dataset X (used axis titles). ancestry_Y Label dataset Y (used axis titles). title Plot title. x_label X-axis label. `NULL`, auto-generated. y_label Y-axis label. `NULL`, auto-generated. point_size Size points. Default 1.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_estimated_dispersions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Estimated Gene Dispersions Between Two Datasets — plot_estimated_dispersions","text":"ggplot2 scatter plot object.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_estimated_means.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Estimated Gene Means Between Two Datasets — plot_estimated_means","title":"Plot Estimated Gene Means Between Two Datasets — plot_estimated_means","text":"function generates scatter plot comparing gene-wise expression means two datasets (`estimates_X` `estimates_Y`) specified normalization method. reference line slope = 1 included help visualize agreement datasets.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_estimated_means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Estimated Gene Means Between Two Datasets — plot_estimated_means","text":"","code":"plot_estimated_means(   estimates_X,   estimates_Y,   method = c(\"raw\", \"logcpm\", \"mle\", \"map\", \"libnorm_mle\", \"libnorm_map\"),   log = TRUE,   ancestry_X = \"Dataset X\",   ancestry_Y = \"Dataset Y\",   title = NULL,   x_label = NULL,   y_label = NULL,   point_size = 1 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_estimated_means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Estimated Gene Means Between Two Datasets — plot_estimated_means","text":"estimates_X list returned `estimate_params()` dataset X. Must contain `means` sublist. estimates_Y list returned `estimate_params()` dataset Y. Must contain `means` sublist. method Character. Type gene-level mean compare. One `\"raw\"` (unadjusted counts), `\"libnorm\"` (library-normalized counts), `\"logcpm\"` (log2 counts per million). log Logical. Whether log10-transform mean values plotting. Default `FALSE`. ancestry_X Character. Label used dataset X axis titles. Default `\"Dataset X\"`. ancestry_Y Character. Label used dataset Y axis titles. Default `\"Dataset Y\"`. title Plot title. x_label X-axis label. y_label Y-axis label. point_size Numeric. Size scatter plot points. Default `1`.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_estimated_means.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Estimated Gene Means Between Two Datasets — plot_estimated_means","text":"[ggplot2::ggplot()] object showing gene-wise mean comparison.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_estimated_means.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Estimated Gene Means Between Two Datasets — plot_estimated_means","text":"","code":"if (FALSE) { # \\dontrun{ estimates_X <- estimate_params(count_matrix_X) estimates_Y <- estimate_params(count_matrix_Y) plot_estimated_means(estimates_X, estimates_Y, method = \"libnorm\", log = TRUE) } # }"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_expression_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Expression Heatmap with Ancestry and Group Split — plot_expression_heatmap","title":"Expression Heatmap with Ancestry and Group Split — plot_expression_heatmap","text":"Generates z-scored expression heatmap samples split combined ancestry group, annotations ancestry group using ComplexHeatmap.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_expression_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expression Heatmap with Ancestry and Group Split — plot_expression_heatmap","text":"","code":"plot_expression_heatmap(   X,   Y,   MX,   MY,   a_col,   g_col,   features = NULL,   title = NULL,   x_label = NULL,   y_label = NULL,   file = NULL,   width = 8,   height = 8 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_expression_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expression Heatmap with Ancestry and Group Split — plot_expression_heatmap","text":"X Expression matrix first ancestry. Y Expression matrix second ancestry. MX Metadata X. Metadata Y. a_col Name column metadata defines ancestry. g_col Name column metadata defines groups. features Optional vector feature names plot. Defaults first 9 features. title Optional heatmap title. x_label Optional label color legend. y_label Optional label row axis. file Optional file path save plot (PDF, PNG, JPEG, TIFF). width Plot width inches (default = 8). height Plot height inches (default = 8).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_expression_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expression Heatmap with Ancestry and Group Split — plot_expression_heatmap","text":"Invisibly returns NULL. Called side effect drawing saving heatmap.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_feature.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot feature distributions across two splits — plot_feature","title":"Plot feature distributions across two splits — plot_feature","text":"Generates boxplots scaled feature values across two data splits (X Y), stratified grouping column, optionally specified features.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_feature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot feature distributions across two splits — plot_feature","text":"","code":"plot_feature(   X,   Y,   MX,   MY,   x_var,   fill_var,   features = NULL,   title = NULL,   x_label = NULL,   y_label = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_feature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot feature distributions across two splits — plot_feature","text":"X numeric matrix data frame test split Y numeric matrix data frame inference split MX Metadata X, containing IDs group information Metadata Y, containing IDs group information features Character vector feature names plot. Defaults first 9 common features NULL. title Optional title plot g_col Column name metadata indicating group a_col Column name metadata indicating ancestry id_col Column name metadata sample identifiers (assumes rownames matrix IDs)","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_feature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot feature distributions across two splits — plot_feature","text":"ggplot2 object containing faceted boxplot","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_imbalanced_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Imbalanced Groups — plot_imbalanced_groups","title":"Plot Imbalanced Groups — plot_imbalanced_groups","text":"Create bar plot comparing two groups counts category.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_imbalanced_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Imbalanced Groups — plot_imbalanced_groups","text":"","code":"plot_imbalanced_groups(   MX,   MY,   x_var,   fill_var,   title = NULL,   x_label = NULL,   y_label = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_imbalanced_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Imbalanced Groups — plot_imbalanced_groups","text":"MX data frame first group. data frame second group. x_var Name variable x-axis (string). fill_var Name variable fill color (string). title Plot title (optional). x_label Label x-axis (optional). y_label Label y-axis (optional).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_imbalanced_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Imbalanced Groups — plot_imbalanced_groups","text":"ggplot object.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_jaccard_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Jaccard Heatmap of Sample Reuse Across Iterations — plot_jaccard_heatmap","title":"Plot Jaccard Heatmap of Sample Reuse Across Iterations — plot_jaccard_heatmap","text":"Computes visualizes Jaccard similarity sample usage across iterations given role (e.g., \"test\", \"train\", \"inference\").","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_jaccard_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Jaccard Heatmap of Sample Reuse Across Iterations — plot_jaccard_heatmap","text":"","code":"plot_jaccard_heatmap(   data,   role,   row_names = NULL,   title = NULL,   file = NULL,   width = 8,   height = 8 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_jaccard_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Jaccard Heatmap of Sample Reuse Across Iterations — plot_jaccard_heatmap","text":"data data.frame columns sample_id, role, iteration. role string, one \"test\", \"train\", \"inference\". title Optional title heatmap. file Optional filename save heatmap (pdf, png, jpeg, tiff). width, height Width height saved file (inches).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_jaccard_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Jaccard Heatmap of Sample Reuse Across Iterations — plot_jaccard_heatmap","text":"Invisibly returns Jaccard matrix (numeric matrix).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_mean_variance_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Mean-Variance Relationship with Density Overlay — plot_mean_variance_density","title":"Plot Mean-Variance Relationship with Density Overlay — plot_mean_variance_density","text":"function visualizes relationship mean variance log2-transformed expression values across genes. smooth 2D kernel density estimate shown white--blue background, genes falling low-density regions highlighted black dots.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_mean_variance_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Mean-Variance Relationship with Density Overlay — plot_mean_variance_density","text":"","code":"plot_mean_variance_density(   X,   title = NULL,   x_label = NULL,   y_label = NULL,   offset = 0.5,   density_grid_size = 500,   outlier_quantile = 0.75,   point_size = 1 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_mean_variance_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Mean-Variance Relationship with Density Overlay — plot_mean_variance_density","text":"X numeric matrix data.frame samples rows genes columns. Typically output limma::voom (.e., voom(data)$E). title Optional title plot. x_label Optional label x-axis. y_label Optional label y-axis. density_grid_size Resolution KDE grid (default 500). outlier_quantile Genes KDE quantile shown outliers (default 0.75). point_size Size points. Default 1.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_mean_variance_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Mean-Variance Relationship with Density Overlay — plot_mean_variance_density","text":"ggplot2 object displaying mean-variance density plot.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_mean_variance_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Mean-Variance Trend Using log2-CPM (voom-style) — plot_mean_variance_trend","title":"Plot Mean-Variance Trend Using log2-CPM (voom-style) — plot_mean_variance_trend","text":"function plots mean-variance relationship across genes based log2-counts-per-million (log2-CPM) values derived raw count data. gene plotted average log2-CPM (mean expression) standard deviation across samples. LOWESS curve overlaid show global trend, similar diagnostic plot produced limma::voom.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_mean_variance_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Mean-Variance Trend Using log2-CPM (voom-style) — plot_mean_variance_trend","text":"","code":"plot_mean_variance_trend(   X,   title = NULL,   x_label = NULL,   y_label = NULL,   point_size = 1 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_mean_variance_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Mean-Variance Trend Using log2-CPM (voom-style) — plot_mean_variance_trend","text":"X numeric matrix data.frame **raw count data** (samples rows, genes columns). title optional character string specifying plot title. x_label optional label x-axis. Defaults \"Mean log2-CPM\". y_label optional label y-axis. Defaults \"Standard deviation\". point_size numeric value point size scatter plot (default = 1).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_mean_variance_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Mean-Variance Trend Using log2-CPM (voom-style) — plot_mean_variance_trend","text":"ggplot2 object showing mean-standard deviation trend log2-CPM values.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_null_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot permutation-based T-statistics with observed values and p-values — plot_null_distribution","title":"Plot permutation-based T-statistics with observed values and p-values — plot_null_distribution","text":"Plots null distributions T-statistics perm_interaction_effect(). Adds dashed lines observed T-statistics, optional normal fit overlay, optional density overlay.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_null_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot permutation-based T-statistics with observed values and p-values — plot_null_distribution","text":"","code":"plot_null_distribution(   data,   features = NULL,   show_p = TRUE,   show_normal = TRUE,   title = NULL,   x_label = NULL,   y_label = NULL,   bins = 50 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_null_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot permutation-based T-statistics with observed values and p-values — plot_null_distribution","text":"data list perm_interaction_effect(), must include T_null summary_stats. features Character vector features plot. Defaults first 9 NULL. show_p Logical. Show parametric p-values? (default TRUE) show_normal Logical. Overlay fitted normal curve? (default TRUE) title Optional plot title. x_label Optional string x-axis label. y_label Optional string y-axis label. bins Integer number histogram bins (default 50)","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_null_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot permutation-based T-statistics with observed values and p-values — plot_null_distribution","text":"ggplot2 object.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_pca_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"PCA Cluster Plot — plot_pca_cluster","title":"PCA Cluster Plot — plot_pca_cluster","text":"Generate PCA plot combined groups optional coloring shaping. Axis labels always include variance explained selected PCs.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_pca_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCA Cluster Plot — plot_pca_cluster","text":"","code":"plot_pca_cluster(   X,   Y,   MX,   MY,   color_var = NULL,   shape_var = NULL,   pcs = c(1, 2),   title = NULL,   x_label = NULL,   y_label = NULL,   point_size = 1 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_pca_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCA Cluster Plot — plot_pca_cluster","text":"X Numeric matrix data frame first group. Y Numeric matrix data frame second group. MX Metadata X. Metadata Y. color_var Name metadata variable color (optional). shape_var Name metadata variable shape (optional). pcs Integer vector length 2 indicating PCs plot (default c(1,2)). title Plot title. x_label X-axis label. y_label Y-axis label. point_size Size points.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_pca_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCA Cluster Plot — plot_pca_cluster","text":"ggplot object.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_pvalue_concordance.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot concordance of -log10 p-values between two methods — plot_pvalue_concordance","title":"Plot concordance of -log10 p-values between two methods — plot_pvalue_concordance","text":"Creates scatter hexbin plot comparing -log10 transformed p-values two statistical methods. Optionally colors points significance facets grouping variable. Correlation coefficients regression lines shown globally per facet.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_pvalue_concordance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot concordance of -log10 p-values between two methods — plot_pvalue_concordance","text":"","code":"plot_pvalue_concordance(   data,   x_var,   y_var,   x_sig_source = NULL,   y_sig_source = NULL,   facet_col = NULL,   facet_levels = NULL,   title = NULL,   x_label = NULL,   y_label = NULL,   color_label = NULL,   sig_thr = 0.05,   log_cap = 5,   epsilon = 1e-16,   point_size = 0.5,   hex = FALSE )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_pvalue_concordance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot concordance of -log10 p-values between two methods — plot_pvalue_concordance","text":"data Data frame containing p-values optional grouping significance columns. x_var Character. Name column x-axis p-values. y_var Character. Name column y-axis p-values. x_sig_source Optional character. Column significance x p-values. y_sig_source Optional character. Column significance y p-values. facet_col Optional character. Column name facet plot . facet_levels Optional character vector. Subset levels include facet_col. title Character. Optional plot title. x_label Character. X-axis label. Defaults -log10(x_var). y_label Character. Y-axis label. Defaults -log10(y_var). sig_thr Numeric. P-value threshold calling significance. Default 0.05. log_cap Numeric. Maximum value shown -log10(p). Default 5. epsilon Numeric. Small constant added log10 transform. Default 1e-16. point_size Numeric. Size points scatter plot. Default 0.5. hex Logical. TRUE, use hexagonal binning instead individual points. Default FALSE.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_pvalue_concordance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot concordance of -log10 p-values between two methods — plot_pvalue_concordance","text":"ggplot2 object showing concordance p-values two methods.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_pvalue_concordance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot concordance of -log10 p-values between two methods — plot_pvalue_concordance","text":"hex = TRUE, hexbin plot produced without individual points significance coloring. Otherwise, scatter plot shown optional significance-based coloring shape encoding capped values. Correlation (Pearson's r) regression lines shown globally per facet faceting enabled.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_pvalue_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot P-value Distribution Colored by a Binned Fill Variable — plot_pvalue_distribution","title":"Plot P-value Distribution Colored by a Binned Fill Variable — plot_pvalue_distribution","text":"Visualizes distribution variable (typically p-values) using stacked histogram. Bars colored based binned values second variable (e.g., test statistic), centered around zero. --range values grouped outermost bins labeled `<=` `>=`. plot can optionally faceted categorical column.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_pvalue_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot P-value Distribution Colored by a Binned Fill Variable — plot_pvalue_distribution","text":"","code":"plot_pvalue_distribution(   data,   x_var,   fill_var = NULL,   facet_col = NULL,   facet_levels = NULL,   title = NULL,   x_label = NULL,   y_label = NULL,   fill_label = NULL,   bins = 50,   fill_bins = 9 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_pvalue_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot P-value Distribution Colored by a Binned Fill Variable — plot_pvalue_distribution","text":"data data frame containing least columns specified x_var fill_var. x_var String. Name column use x-axis (e.g., \"p_value\"). fill_var String. Name column used fill coloring (e.g., \"T_obs\"). facet_col Optional. String. Name column use faceting plot (e.g., \"feature\", \"cluster\"). NULL, faceting applied. facet_levels Optional. character vector levels include faceting. NULL facet_col provided, first 9 unique values used. title Optional. Character string set plot title. x_label Label x-axis. Defaults value x_var. y_label Label y-axis. Defaults \"Count\". bins Integer. Number bins use x-axis histogram (default 50). fill_bins Integer. Number bins use binning fill variable (must odd; default 9). Bins centered 0 symmetric. outermost bins labeled <= >=.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_pvalue_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot P-value Distribution Colored by a Binned Fill Variable — plot_pvalue_distribution","text":"ggplot2 object showing histogram x_var, bars stacked colored binned values fill_var. Faceting applied specified.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_pvalue_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot P-value Distribution Colored by a Binned Fill Variable — plot_pvalue_distribution","text":"","code":"# Basic histogram plot_pvalue_distribution(data = agg_perm, x_var = \"p_value\", fill_var = \"T_obs\") #> Error: object 'agg_perm' not found  # Faceted by cluster plot_pvalue_distribution(   data = agg_perm,   x_var = \"p_value\",   fill_var = \"T_obs\",   facet_col = \"cluster\" ) #> Error: object 'agg_perm' not found"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_qq_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Faceted QQ plots for specified genes — plot_qq_correlation","title":"Faceted QQ plots for specified genes — plot_qq_correlation","text":"Plots empirical vs. theoretical quantiles selected genes, optional customization labels title.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_qq_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Faceted QQ plots for specified genes — plot_qq_correlation","text":"","code":"plot_qq_correlation(   empirical,   theoretical,   method = c(\"pearson\", \"spearman\"),   facet_levels = NULL,   title = NULL,   x_label = NULL,   y_label = NULL,   point_size = 1 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_qq_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Faceted QQ plots for specified genes — plot_qq_correlation","text":"empirical Matrix empirical quantiles (quantiles × genes) theoretical Matrix theoretical quantiles (dimensions) method Correlation method: \"pearson\" \"spearman\" facet_levels Vector gene names plot (must match colnames) title Optional plot title x_label Optional x-axis label y_label Optional y-axis label point_size Size points. Default 1.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_qq_correlation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Faceted QQ plots for specified genes — plot_qq_correlation","text":"ggplot object QQ plots faceted gene","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_sensitivity_specificity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sensitivity and specificity as a bar plot. — plot_sensitivity_specificity","title":"Plot sensitivity and specificity as a bar plot. — plot_sensitivity_specificity","text":"Computes sensitivity specificity binary classification tasks. Takes binary vectors true predicted labels. Uses `target` value define positive class. Sensitivity specificity computed TP, FP, FN, TN counts. Plots results two bars percentage labels.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_sensitivity_specificity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sensitivity and specificity as a bar plot. — plot_sensitivity_specificity","text":"","code":"plot_sensitivity_specificity(   y_true,   y_selected,   target = 1,   title = NULL,   x_label = NULL,   y_label = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_sensitivity_specificity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sensitivity and specificity as a bar plot. — plot_sensitivity_specificity","text":"y_true Vector true labels (numeric, factor, logical). y_selected Vector predicted labels (numeric, factor, logical). target value treated positive class. title Optional plot title. x_label Optional x-axis label. y_label Optional y-axis label (default: \"Value label\").","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_sensitivity_specificity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot sensitivity and specificity as a bar plot. — plot_sensitivity_specificity","text":"ggplot2 object showing sensitivity specificity bars.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_significance_landscape.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Interaction Significance Landscape — plot_significance_landscape","title":"Plot Interaction Significance Landscape — plot_significance_landscape","text":"Creates scatter plot summarizing reproducibility statistical significance interaction effects across multiple stratified resampling iterations.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_significance_landscape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Interaction Significance Landscape — plot_significance_landscape","text":"","code":"plot_significance_landscape(   x,   x_var,   y_var,   color_var = NULL,   label_var = NULL,   label_threshold = NULL,   point_size = 0.5 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_significance_landscape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Interaction Significance Landscape — plot_significance_landscape","text":"x data frame (e.g., `repeated_perm_diff_interaction()`) containing least feature, effect size, variability, p-value columns. x_var Name column use x-axis. Default: \"mean_T_obs\" y_var Name column use y-axis. plotted -log10(y). Default: \"median_p\" color_var Name column map color. Default: \"prob_signif\" label_var Name column used labeling points. Default: \"feature\" label_threshold Optional numeric. provided, labels features `color_var >= threshold`. NULL (default), labels shown. point_size Numeric value control base font size. Default: 0.5","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_significance_landscape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Interaction Significance Landscape — plot_significance_landscape","text":"ggplot2 object.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_sim_interaction_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Simulated Interaction Effects — plot_sim_interaction_effect","title":"Plot Simulated Interaction Effects — plot_sim_interaction_effect","text":"Create histogram interaction effects (true_log2FC) simulated interaction effects table fI.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_sim_interaction_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Simulated Interaction Effects — plot_sim_interaction_effect","text":"","code":"plot_sim_interaction_effect(   fI,   exclude_zeros = TRUE,   title = NULL,   x_label = NULL,   y_label = NULL,   bins = 50 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_sim_interaction_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Simulated Interaction Effects — plot_sim_interaction_effect","text":"fI Data frame containing column named true_log2FC interaction effects. exclude_zeros Logical, whether exclude exact zeros histogram. title Optional character string plot title. x_label Optional x-axis label. Defaults \"Interaction effect (log2FC)\". y_label Optional y-axis label. Defaults \"Count\". bins Integer specifying number histogram bins. Default 50.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_sim_interaction_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Simulated Interaction Effects — plot_sim_interaction_effect","text":"ggplot object showing distribution interaction effects.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_sim_main_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Simulated Main Effects — plot_sim_main_effect","title":"Plot Simulated Main Effects — plot_sim_main_effect","text":"Create scatter plot comparing true log2 fold-change (log2FC) values two simulated datasets fX fY. plot includes 1:1 reference line visualize agreement datasets.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_sim_main_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Simulated Main Effects — plot_sim_main_effect","text":"","code":"plot_sim_main_effect(   fX,   fY,   ancestry_X = \"Dataset X\",   ancestry_Y = \"Dataset Y\",   title = NULL,   x_label = NULL,   y_label = NULL,   point_size = 1 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_sim_main_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Simulated Main Effects — plot_sim_main_effect","text":"fX Data frame containing column named true_log2FC dataset X. fY Data frame containing column named true_log2FC dataset Y. title Optional character string plot title. x_label Optional x-axis label. Defaults \"Main effect fX\". y_label Optional y-axis label. Defaults \"Main effect fY\". point_size Numeric value controlling point size plot.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_sim_main_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Simulated Main Effects — plot_sim_main_effect","text":"ggplot object showing main effect comparison.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_simulated_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Simulated Features by Ancestry and Group (base R + data.table) — plot_simulated_features","title":"Plot Simulated Features by Ancestry and Group (base R + data.table) — plot_simulated_features","text":"Visualize expression selected genes simulated data, grouped ancestry filled group.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_simulated_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Simulated Features by Ancestry and Group (base R + data.table) — plot_simulated_features","text":"","code":"plot_simulated_features(   sim_data,   features = NULL,   a_col = \"ancestry\",   g_col = \"group\",   zscore = TRUE,   n = 12,   seed = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_simulated_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Simulated Features by Ancestry and Group (base R + data.table) — plot_simulated_features","text":"sim_data Output `simulate_DEG_signal()` `simulate_NB_counts()`. features Optional character vector gene names plot. NULL, samples `n` genes. a_col Column `sample_info` used x-axis grouping (e.g., \"ancestry\"). g_col Column `sample_info` used fill color (e.g., \"group\"). zscore Logical. TRUE, z-score normalize gene across samples. n Number genes sample `features` NULL. seed Optional random seed.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_simulated_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Simulated Features by Ancestry and Group (base R + data.table) — plot_simulated_features","text":"ggplot2 object showing boxplots selected features.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_stratified_feature.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot stratified feature distributions across splits — plot_stratified_feature","title":"Plot stratified feature distributions across splits — plot_stratified_feature","text":"Generates boxplots scaled feature values across data splits (X, Y, R) stratified grouping column, optionally specified features.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_stratified_feature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot stratified feature distributions across splits — plot_stratified_feature","text":"","code":"plot_stratified_feature(   X,   Y,   R,   MX,   MY,   MR,   x_var,   fill_var,   features = NULL,   title = NULL,   x_label = NULL,   y_label = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_stratified_feature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot stratified feature distributions across splits — plot_stratified_feature","text":"X Numeric matrix data.frame features cohort X (train). Y Numeric matrix data.frame features cohort Y (test). R Numeric matrix data.frame features cohort R (inference). MX Metadata `X` (train). Metadata `Y` (test). MR Metadata `R` (inference). x_var Name metadata column x-axis (string). fill_var Name metadata column fill (string). features Character vector features plot (defaults first 9). title Plot title (optional). x_label Label x-axis (optional). y_label Label y-axis (optional).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_stratified_feature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot stratified feature distributions across splits — plot_stratified_feature","text":"ggplot2 object.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_stratified_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot stratified ancestry sets. — plot_stratified_sets","title":"Plot stratified ancestry sets. — plot_stratified_sets","text":"Create bar plot comparing stratified ancestry sets.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_stratified_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot stratified ancestry sets. — plot_stratified_sets","text":"","code":"plot_stratified_sets(   MX,   MY,   MR,   x_var,   fill_var,   title = NULL,   x_label = NULL,   y_label = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_stratified_sets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot stratified ancestry sets. — plot_stratified_sets","text":"MX data frame train meta. data frame test meta. MR data frame inference meta. x_var Name variable x-axis (string). fill_var Name variable fill color (string). title Plot title (optional). x_label Label x-axis (optional). y_label Label y-axis (optional).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_stratified_sets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot stratified ancestry sets. — plot_stratified_sets","text":"ggplot object.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_tsne_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"t-SNE Cluster Plot — plot_tsne_cluster","title":"t-SNE Cluster Plot — plot_tsne_cluster","text":"Generate t-SNE plot combined groups optional coloring shaping.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_tsne_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"t-SNE Cluster Plot — plot_tsne_cluster","text":"","code":"plot_tsne_cluster(   X,   Y,   MX,   MY,   color_var = NULL,   shape_var = NULL,   perplexity = 50,   title = NULL,   x_label = NULL,   y_label = NULL,   point_size = 1,   seed = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_tsne_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"t-SNE Cluster Plot — plot_tsne_cluster","text":"X Numeric matrix data frame first group. Y Numeric matrix data frame second group. MX Metadata X. Metadata Y. color_var Name metadata variable color (optional). shape_var Name metadata variable shape (optional). perplexity t-SNE perplexity parameter. title Plot title. x_label X-axis label. y_label Y-axis label. point_size Size points. seed Optional random seed.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_tsne_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"t-SNE Cluster Plot — plot_tsne_cluster","text":"ggplot object.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Volcano Plot — plot_volcano","title":"Volcano Plot — plot_volcano","text":"Creates volcano plot capped -log10(p-values) y-axis. Supports effect size threshold lines, feature annotations, flexible color shape aesthetics.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Volcano Plot — plot_volcano","text":"","code":"plot_volcano(   data,   x_var,   y_var,   color_var = NULL,   shape_var = NULL,   features = NULL,   sig_thr = NULL,   effect_thr = NULL,   title = NULL,   x_label = NULL,   y_label = NULL,   color_label = NULL,   shape_label = NULL,   log_cap = 5,   epsilon = 1e-15,   point_size = 1 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Volcano Plot — plot_volcano","text":"data Data frame variables plot. x_var String. Column name x-axis (e.g., effect size). y_var String. Column name y-axis (p-values transform). color_var String. Column name mapped point colors. shape_var String. Column name mapped point shapes. features Optional vector. Feature names annotate. sig_thr Numeric. Significance threshold horizontal line. effect_thr Numeric. Effect size threshold vertical lines. title String. Plot title. x_label String. Custom x-axis label. y_label String. Custom y-axis label. color_label String. Legend title color. shape_label String. Legend title shape. log_cap Numeric. Max -log10(p) cap values. Default 5. epsilon Numeric. Small constant avoid log10(0). Default 1e-15. point_size Numeric. Size points. Default 1.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/plot_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Volcano Plot — plot_volcano","text":"ggplot2 object.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/repeated_perm_diff_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated Permutation Interaction Test on Stratified Subsets — repeated_perm_diff_interaction","title":"Repeated Permutation Interaction Test on Stratified Subsets — repeated_perm_diff_interaction","text":"Performs multiple stratified subsamples overrepresented group, runs `perm_diff_interaction()` , aggregates results.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/repeated_perm_diff_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated Permutation Interaction Test on Stratified Subsets — repeated_perm_diff_interaction","text":"","code":"repeated_perm_diff_interaction(   X,   Y,   MX,   MY,   stratify_cols,   g_col,   a_col,   features = NULL,   n_iter = 50,   B = 100,   seed = 42 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/repeated_perm_diff_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated Permutation Interaction Test on Stratified Subsets — repeated_perm_diff_interaction","text":"X Expression matrix (samples × genes) overrepresented ancestry. Y Expression matrix underrepresented ancestry. MX Metadata X. Metadata Y. stratify_cols Character vector metadata column names stratify . g_col Name grouping variable (e.g., \"condition\"). a_col Name ancestry variable. features Optional vector feature names include (default: ). n_iter Number stratified subsample iterations. B Number permutations `perm_diff_interaction()` call. seed Base random seed reproducibility.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/repeated_perm_diff_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated Permutation Interaction Test on Stratified Subsets — repeated_perm_diff_interaction","text":"list : aggregated Data frame per-feature summary across iterations. all_iterations Combined data frame summary_stats results. metadata Info run parameters.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/sim_2group_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate RNA-seq Expression Data for Two Groups — sim_2group_expression","title":"Simulate RNA-seq Expression Data for Two Groups — sim_2group_expression","text":"Generate simulated RNA-seq count matrix two groups using parameters estimated real data compcodeR::generateSyntheticData. Simulated data retain similar mean–variance characteristics input, specified number differentially expressed genes (DEGs).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/sim_2group_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate RNA-seq Expression Data for Two Groups — sim_2group_expression","text":"","code":"sim_2group_expression(   estimates,   ancestry,   n_samples,   n_degs,   log2FC,   mean_method = c(\"mle\", \"map\", \"libnorm_mle\", \"libnorm_map\"),   disp_method = c(\"mle\", \"map\"),   seed = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/sim_2group_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate RNA-seq Expression Data for Two Groups — sim_2group_expression","text":"estimates Optional list pre-computed parameter estimates estimate_params. NULL, parameters estimated X. ancestry Character scalar giving ancestry label simulation. n_samples Integer, number samples simulate per condition. n_degs Integer, number differentially expressed genes simulate. log2FC Numeric, log2 fold-change magnitude DEGs. mean_method Character string, method use mean estimates. One \"mle\", \"map\", \"libnorm_mle\", \"libnorm_map\". disp_method Character string, method use dispersion estimates. One \"mle\", \"map\". seed Optional integer random seed reproducibility. X Numeric matrix data frame counts real data (samples rows, genes columns).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/sim_2group_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate RNA-seq Expression Data for Two Groups — sim_2group_expression","text":"list following elements: X Simulated count matrix (samples x genes). M Data frame sample metadata. f Data frame gene-level features:        DE status (is_DE) true log2FC (true_log2FC). input_params Parameter estimates real data. output_params Parameter estimates simulated data. in_out_plots List ggplot objects comparing means dispersions        real simulated data.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/sim_4group_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate RNA-seq Expression Data for Four Groups (Two Ancestries × Two Conditions) — sim_4group_expression","title":"Simulate RNA-seq Expression Data for Four Groups (Two Ancestries × Two Conditions) — sim_4group_expression","text":"Generate simulated RNA-seq count matrices two ancestries, two conditions, based parameters estimated real data. function calls sim_2group_expression twice (per ancestry) calculates true interaction effects ancestries gene.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/sim_4group_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate RNA-seq Expression Data for Four Groups (Two Ancestries × Two Conditions) — sim_4group_expression","text":"","code":"sim_4group_expression(   estimates_X = NULL,   estimates_Y = NULL,   ancestry_X,   ancestry_Y,   n_samples_X,   n_samples_Y,   n_degs_X,   n_degs_Y,   log2FC_X,   log2FC_Y,   mean_method = c(\"mle\", \"map\", \"libnorm_mle\", \"libnorm_map\"),   disp_method = c(\"mle\", \"map\"),   seed = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/sim_4group_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate RNA-seq Expression Data for Four Groups (Two Ancestries × Two Conditions) — sim_4group_expression","text":"estimates_X Optional list parameter estimates estimate_params ancestry X. NULL, parameters estimated X. estimates_Y Optional list parameter estimates estimate_params ancestry Y. NULL, parameters estimated Y. ancestry_X Character scalar giving ancestry label X. ancestry_Y Character scalar giving ancestry label Y. n_samples_X Integer, number samples simulate per condition ancestry X. n_samples_Y Integer, number samples simulate per condition ancestry Y. n_degs_X Integer, number differentially expressed genes simulate ancestry X. n_degs_Y Integer, number differentially expressed genes simulate ancestry Y. log2FC_X Numeric, log2 fold-change magnitude DEGs ancestry X. log2FC_Y Numeric, log2 fold-change magnitude DEGs ancestry Y. mean_method Character string, method use mean estimates ancestries. One \"mle\", \"map\", \"libnorm_mle\", \"libnorm_map\". disp_method Character string, method use dispersion estimates ancestries. One \"mle\", \"map\". seed Optional integer random seed reproducibility. simulation ancestry Y use seed + 1000 ensure different DE gene sets. X Numeric matrix data frame counts first ancestry (samples rows, genes columns). Y Numeric matrix data frame counts second ancestry (samples rows, genes columns).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/sim_4group_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate RNA-seq Expression Data for Four Groups (Two Ancestries × Two Conditions) — sim_4group_expression","text":"list following elements: X Simulated count matrix (samples x genes) ancestry X. Y Simulated count matrix (samples x genes) ancestry Y. MX Sample metadata ancestry X. Sample metadata ancestry Y. fX Gene-level features (DE status, true log2FC) ancestry X. fY Gene-level features (DE status, true log2FC) ancestry Y. pX List ggplot objects comparing means dispersions ancestry X. pY List ggplot objects comparing means dispersions ancestry Y. fI Data frame interaction effects, DE status true interaction log2FC.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/sim_4group_expression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate RNA-seq Expression Data for Four Groups (Two Ancestries × Two Conditions) — sim_4group_expression","text":"interaction effect gene defined : $$\\mathrm{Interaction\\ log2FC} = \\mathrm{log2FC}_Y - \\mathrm{log2FC}_X$$ \\(\\mathrm{log2FC}_X\\) \\(\\mathrm{log2FC}_Y\\) true log2 fold-changes simulated data ancestry X Y respectively.","code":""},{"path":[]},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/sim_imbalanced_ancestry.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate imbalanced ancestry sampling across two cohorts — sim_imbalanced_ancestry","title":"Simulate imbalanced ancestry sampling across two cohorts — sim_imbalanced_ancestry","text":"Subsample two data matrices (X, Y) metadata (MX, ) mimic ancestry-imbalanced cohort controllable - within-ancestry group splits.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/sim_imbalanced_ancestry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate imbalanced ancestry sampling across two cohorts — sim_imbalanced_ancestry","text":"","code":"sim_imbalanced_ancestry(   X,   Y,   MX,   MY,   g_col,   a_col,   majority = c(\"X\", \"Y\"),   total_samples = 100,   between_ratio = 1,   within_major_ratio = 1,   within_minor_ratio = 1,   seed = NULL,   replace = FALSE,   verbose = FALSE )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/sim_imbalanced_ancestry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate imbalanced ancestry sampling across two cohorts — sim_imbalanced_ancestry","text":"X Numeric matrix data.frame features cohort X; rows samples must align `MX`. Y Numeric matrix data.frame features cohort Y; rows samples must align ``. MX Data.frame metadata `X`. Data.frame metadata `Y`. g_col Name metadata column two-level group split used inside ancestry (e.g., case/control). a_col Name metadata column holding ancestry label. majority Character, block majority ancestry; one `c(\"X\",\"Y\")`. total_samples Integer, total number samples drawn across ancestries. between_ratio Positive number, majority:minority ancestry ratio. example `2` means 2:1 ancestries. within_major_ratio Positive number, ratio two `g_col` levels inside majority ancestry (`level1:level2 = r:1`). within_minor_ratio Positive number, ratio two `g_col` levels inside minority ancestry (`level1:level2 = r:1`). seed Optional integer; supplied, sets RNG seed. replace Logical; sample replacement within block. verbose Logical; `TRUE`, print per-block split messages.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/sim_imbalanced_ancestry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate imbalanced ancestry sampling across two cohorts — sim_imbalanced_ancestry","text":"list four elements: X Subset feature matrix first return slot. Y Subset feature matrix second return slot. MX Subset metadata aligned `X`. Subset metadata aligned `Y`. ancestry lands `X` vs `Y` depends `majority`:   majority ancestry always returned first.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/sim_imbalanced_ancestry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate imbalanced ancestry sampling across two cohorts — sim_imbalanced_ancestry","text":"X MX must number rows; Y must match well. ancestry block read `a_col` MX ; must contain exactly one non-NA, single label, two labels must differ. within-ancestry split uses `g_col`, must exactly two non-NA labels block. Labels inferred alphabetically, ratio `r` means \"`level1:level2 = r:1`\". Targets rounded. `replace = FALSE` enough rows, function draws available. Per-block split messages printed `verbose = TRUE`. warning emitted shortfall sampling without replacement.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/sim_imbalanced_ancestry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate imbalanced ancestry sampling across two cohorts — sim_imbalanced_ancestry","text":"","code":"set.seed(1) X  <- matrix(rnorm(1000), nrow = 100) Y  <- matrix(rnorm( 800), nrow =  80) MX <- data.frame(anc = \"EUR\",                  grp = sample(c(\"A\",\"B\"), 100, TRUE)) MY <- data.frame(anc = \"AFR\",                  grp = sample(c(\"A\",\"B\"),  80, TRUE)) out <- sim_imbalanced_ancestry(   X, Y, MX, MY,   g_col = \"grp\",   a_col = \"anc\",   majority = \"X\",   total_samples = 120,   between_ratio = 2,   within_major_ratio = 3,   within_minor_ratio = 1,   seed = 123,   verbose = TRUE ) #> Error in assert_input(X, Y, MX, MY, g_col, a_col): X must have rownames corresponding to sample IDs. lapply(out, nrow) #> Error: object 'out' not found"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/simulate_NB_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Negative Binomial RNA-seq Counts from Real Data — simulate_NB_counts","title":"Simulate Negative Binomial RNA-seq Counts from Real Data — simulate_NB_counts","text":"Simulates RNA-seq count data using Negative Binomial model, parameters estimated real count data. Useful creating realistic baseline data method development DEG simulation.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/simulate_NB_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Negative Binomial RNA-seq Counts from Real Data — simulate_NB_counts","text":"","code":"simulate_NB_counts(X, MX, g_col, a_col, seed = NULL)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/simulate_NB_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Negative Binomial RNA-seq Counts from Real Data — simulate_NB_counts","text":"X gene--sample matrix data frame real (integer) RNA-seq counts. MX data frame rownames matching X columns ancestry group. g_col name column MX indicating experimental group (e.g., \"group\"). a_col name column MX indicating ancestry (e.g., \"ancestry\"). seed Optional random seed reproducibility.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/simulate_NB_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Negative Binomial RNA-seq Counts from Real Data — simulate_NB_counts","text":"list containing: counts simulated count matrix shape X (samples × genes). sample_info Metadata ancestry, group, interaction group. params data frame per-gene estimated means dispersions.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/split_stratified_ancestry_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Expression and Metadata into Reference (R), Subset (X), and Inference (Y) Sets — split_stratified_ancestry_sets","title":"Split Expression and Metadata into Reference (R), Subset (X), and Inference (Y) Sets — split_stratified_ancestry_sets","text":"Performs stratified sampling overrepresented group (X, e.g. EUR) match distribution underrepresented group (Y, e.g. AFR) based grouping variable (e.g., condition).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/split_stratified_ancestry_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Expression and Metadata into Reference (R), Subset (X), and Inference (Y) Sets — split_stratified_ancestry_sets","text":"","code":"split_stratified_ancestry_sets(   X,   Y,   MX,   MY,   g_col,   a_col,   seed = NULL,   verbose = TRUE )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/split_stratified_ancestry_sets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Expression and Metadata into Reference (R), Subset (X), and Inference (Y) Sets — split_stratified_ancestry_sets","text":"X Numeric matrix data.frame features cohort X; rows samples must align MX. Y Numeric matrix data.frame features cohort Y; rows samples must align . MX Data.frame metadata X. Data.frame metadata Y. g_col Name metadata column holding stratification label. a_col Name metadata column holding ancestry label. seed Optional numeric seed reproducibility sampling. verbose Logical, whether print messages.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/split_stratified_ancestry_sets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Expression and Metadata into Reference (R), Subset (X), and Inference (Y) Sets — split_stratified_ancestry_sets","text":"list following elements (matrices rownames): R Reference set: remaining X subsampling X Subset set: subsampled X matching Y Y Inference set: full Y, untouched strata_info list usable/missing/insufficient strata","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/stratified_sample_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratified Sampling by Sample IDs — stratified_sample_ids","title":"Stratified Sampling by Sample IDs — stratified_sample_ids","text":"Performs stratified sampling vector sample IDs grouped strata.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/stratified_sample_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratified Sampling by Sample IDs — stratified_sample_ids","text":"","code":"stratified_sample_ids(strata, target_counts, ids)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/stratified_sample_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratified Sampling by Sample IDs — stratified_sample_ids","text":"strata factor indicating strata sample (must match `ids` length). target_counts named vector many samples draw per stratum. ids character numeric vector sample IDs, length `strata`.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/stratified_sample_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratified Sampling by Sample IDs — stratified_sample_ids","text":"character numeric vector sampled IDs.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/subset_limma_interaction_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset Limma Interaction Effect with Stratified Cross-Validation — subset_limma_interaction_effect","title":"Subset Limma Interaction Effect with Stratified Cross-Validation — subset_limma_interaction_effect","text":"Runs stratified train/test splits ancestry sets estimates interaction effects using limma parallel across multiple iterations. Returns aggregated statistics, iteration-level stats, sample logs.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/subset_limma_interaction_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset Limma Interaction Effect with Stratified Cross-Validation — subset_limma_interaction_effect","text":"","code":"subset_limma_interaction_effect(   X,   Y,   MX,   MY,   g_col,   a_col,   covariates = NULL,   use_voom = TRUE,   n_iter = 1000,   workers = future::availableCores() - 1,   seed = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/subset_limma_interaction_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset Limma Interaction Effect with Stratified Cross-Validation — subset_limma_interaction_effect","text":"X data frame matrix features (genotypes predictors). Y response vector matrix. MX Additional metadata covariates `X`. Additional metadata covariates `Y`. g_col Name genotype column `X` used interaction. a_col Name ancestry column used stratified splitting. n_iter Integer. Number iterations run. Default 1000. workers Number parallel workers use. Defaults `future::availableCores() - 1` (reserving one core). seed Optional integer random seed ensure reproducibility.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/subset_limma_interaction_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset Limma Interaction Effect with Stratified Cross-Validation — subset_limma_interaction_effect","text":"list following elements: aggregated_stats Data frame aggregated summary statistics across iterations. iteration_stats Data frame iteration-level statistics. sample_log Data frame logging sample IDs used split. meta List metadata run (e.g., `n_iter` `seed`).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/subset_perm_interaction_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel Subset-Based Interaction Effect Analysis — subset_perm_interaction_effect","title":"Parallel Subset-Based Interaction Effect Analysis — subset_perm_interaction_effect","text":"Runs stratified random subsets permutation-based interaction effect pipeline parallel using C++ core logic. Uses future furrr parallelization automatic plan handling.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/subset_perm_interaction_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel Subset-Based Interaction Effect Analysis — subset_perm_interaction_effect","text":"","code":"subset_perm_interaction_effect(   X,   Y,   MX,   MY,   g_col,   n_iter = 1000,   B = 1000,   save_null = FALSE,   seed = NULL,   workers = future::availableCores() - 1 )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/subset_perm_interaction_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel Subset-Based Interaction Effect Analysis — subset_perm_interaction_effect","text":"X Data frame matrix predictors. Y Outcome variable matrix. MX Covariates test split. Covariates inference split. g_col Name grouping genotype column. n_iter Number random subsets run. Default: 1000. B Number permutations per subset. Default: 1000. save_null Store full permutation null matrix? Default: FALSE. seed Optional seed reproducibility. Default: NULL. workers Number parallel workers. Default: availableCores()-1.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/subset_perm_interaction_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel Subset-Based Interaction Effect Analysis — subset_perm_interaction_effect","text":"list aggregated stats, iteration stats, sample log, permutation nulls (optional), meta information.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/subset_perm_interaction_effect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parallel Subset-Based Interaction Effect Analysis — subset_perm_interaction_effect","text":"function sets parallel plan `multisession` restores previous plan automatically.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/summarize_subsets.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize subsets results by feature, with Cauchy-combined p-value — summarize_subsets","title":"Summarize subsets results by feature, with Cauchy-combined p-value — summarize_subsets","text":"Summarize subsets results feature, Cauchy-combined p-value","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/summarize_subsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize subsets results by feature, with Cauchy-combined p-value — summarize_subsets","text":"","code":"summarize_subsets(data)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/summarize_subsets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize subsets results by feature, with Cauchy-combined p-value — summarize_subsets","text":"data data frame columns: `feature`, `T_obs`, `p_value`, `p_adj`, `ave_expr`, `iteration`.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/theme_nature_fonts.html","id":null,"dir":"Reference","previous_headings":"","what":"Nature-Inspired Font Sizes Theme (Internal) — theme_nature_fonts","title":"Nature-Inspired Font Sizes Theme (Internal) — theme_nature_fonts","text":"ggplot2 theme sets small, uniform base font sizes minimal, nature-journal-style aesthetic. Designed compact, consistent typography.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/theme_nature_fonts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nature-Inspired Font Sizes Theme (Internal) — theme_nature_fonts","text":"","code":"theme_nature_fonts(base_size = 8)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/theme_nature_fonts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nature-Inspired Font Sizes Theme (Internal) — theme_nature_fonts","text":"base_size Base font size text elements (default: 5).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/theme_nature_fonts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nature-Inspired Font Sizes Theme (Internal) — theme_nature_fonts","text":"ggplot2 theme object.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/theme_small_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Small Legend Theme (Internal) — theme_small_legend","title":"Small Legend Theme (Internal) — theme_small_legend","text":"helper ggplot2 theme minimizes legend spacing key size, useful compact plots figure panels.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/theme_small_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small Legend Theme (Internal) — theme_small_legend","text":"","code":"theme_small_legend(base_size = 8, ...)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/theme_small_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Small Legend Theme (Internal) — theme_small_legend","text":"base_size Base text size scale legend keys (default: 5). ... Additional arguments passed [ggplot2::theme()].","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/theme_small_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Small Legend Theme (Internal) — theme_small_legend","text":"ggplot2 theme object.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/theme_white_background.html","id":null,"dir":"Reference","previous_headings":"","what":"A clean white ggplot2 theme with optional facet labels — theme_white_background","title":"A clean white ggplot2 theme with optional facet labels — theme_white_background","text":"Custom theme white background, minimal gridlines, optional control facet label display.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/theme_white_background.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A clean white ggplot2 theme with optional facet labels — theme_white_background","text":"","code":"theme_white_background(show_facets = TRUE, ...)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/theme_white_background.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A clean white ggplot2 theme with optional facet labels — theme_white_background","text":"show_facets Logical. `TRUE`, facet strip labels shown. `FALSE`, facet strip text removed. ... Additional arguments passed [ggplot2::theme()].","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/theme_white_background.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A clean white ggplot2 theme with optional facet labels — theme_white_background","text":"ggplot2 theme object.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/track_sample_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Track Sample Roles and IDs from a Split — track_sample_ids","title":"Track Sample Roles and IDs from a Split — track_sample_ids","text":"Extracts sample IDs split object labels roles (test, train, inference), associating sample assigned role given iteration.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/track_sample_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Track Sample Roles and IDs from a Split — track_sample_ids","text":"","code":"track_sample_ids(split, iteration)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/track_sample_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Track Sample Roles and IDs from a Split — track_sample_ids","text":"split split object returned split_stratified_ancestry_sets(). iteration integer iteration number annotate split .","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/track_sample_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Track Sample Roles and IDs from a Split — track_sample_ids","text":"data.frame columns: ids, role, iteration.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/train_binary_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Binary Classification Model with Cross-Validation (tidymodels) — train_binary_model","title":"Train a Binary Classification Model with Cross-Validation (tidymodels) — train_binary_model","text":"function trains binary classification model using tidymodels, support hyperparameter tuning cross-validation.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/train_binary_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Binary Classification Model with Cross-Validation (tidymodels) — train_binary_model","text":"","code":"train_binary_model(   X,   y,   method = \"glmnet\",   tune_len = 10,   cv_folds = 5,   max_iter = 1000,   seed = NULL )"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/train_binary_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Binary Classification Model with Cross-Validation (tidymodels) — train_binary_model","text":"X data frame predictor variables (samples x features). y binary factor response vector exactly two levels. method string: \"glmnet\" (elastic net) \"rf\" (random forest). tune_len Number hyperparameter settings try (default = 10). cv_folds Number cross-validation folds (default = 5). max_iter Max number iterations (glmnet, default = 1000). seed Optional seed reproducibility. metric Performance metric optimize (default = \"roc_auc\").","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/train_binary_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Binary Classification Model with Cross-Validation (tidymodels) — train_binary_model","text":"list fitted workflow, tuning results, final model.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/validate_ancestry.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Ancestry Constraints — validate_ancestry","title":"Validate Ancestry Constraints — validate_ancestry","text":"Ensures dataset exactly one ancestry level.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/validate_ancestry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Ancestry Constraints — validate_ancestry","text":"","code":"validate_ancestry(a_X, a_Y)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/validate_ancestry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Ancestry Constraints — validate_ancestry","text":"a_X ancestry label dataset X. a_Y ancestry label dataset Y.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/validate_binary_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Predicted Probabilities from a Fitted Binary Classification Model — validate_binary_model","title":"Generate Predicted Probabilities from a Fitted Binary Classification Model — validate_binary_model","text":"Generate Predicted Probabilities Fitted Binary Classification Model","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/validate_binary_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Predicted Probabilities from a Fitted Binary Classification Model — validate_binary_model","text":"","code":"validate_binary_model(model, X, y)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/validate_binary_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Predicted Probabilities from a Fitted Binary Classification Model — validate_binary_model","text":"model fitted tidymodels workflow (train_binary_model()). X data frame predictor variables. y factor vector true binary outcomes (must match training levels).","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/validate_binary_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Predicted Probabilities from a Fitted Binary Classification Model — validate_binary_model","text":"data frame predicted probabilities true class.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/validate_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Group Factors — validate_groups","title":"Validate Group Factors — validate_groups","text":"Ensures group labels factors, share levels, exactly 2 levels.","code":""},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/validate_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Group Factors — validate_groups","text":"","code":"validate_groups(g_X, g_Y)"},{"path":"https://DKatzlberger.github.io/CrossAncestryGenPhen/reference/validate_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Group Factors — validate_groups","text":"g_X factor vector representing group labels dataset X. g_Y factor vector representing group labels dataset Y.","code":""}]
